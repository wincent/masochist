// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`parseStatement() parser dynamically derived from grammar parses a const boolean assignment statement 1`] = `
[
  {
    "binding": "const",
    "kind": "AssignmentStatement",
    "lhs": {
      "kind": "Identifier",
      "name": "isFoo",
    },
    "rhs": {
      "kind": "BooleanValue",
      "value": true,
    },
  },
]
`;

exports[`parseStatement() parser dynamically derived from grammar parses a let boolean assignment statement 1`] = `
[
  {
    "binding": "let",
    "kind": "AssignmentStatement",
    "lhs": {
      "kind": "Identifier",
      "name": "isFoo",
    },
    "rhs": {
      "kind": "BooleanValue",
      "value": false,
    },
  },
]
`;

exports[`parseStatement() parser dynamically derived from grammar parses a const number assignment statement 1`] = `
[
  {
    "binding": "const",
    "kind": "AssignmentStatement",
    "lhs": {
      "kind": "Identifier",
      "name": "isFoo",
    },
    "rhs": {
      "base": 10,
      "kind": "NumberValue",
      "value": 1,
    },
  },
]
`;

exports[`parseStatement() parser dynamically derived from grammar parses a let number assignment statement 1`] = `
[
  {
    "binding": "let",
    "kind": "AssignmentStatement",
    "lhs": {
      "kind": "Identifier",
      "name": "isFoo",
    },
    "rhs": {
      "base": 10,
      "kind": "NumberValue",
      "value": 2,
    },
  },
]
`;

exports[`parseStatement() parser dynamically derived from grammar parses a const nested array assignment 1`] = `
[
  {
    "binding": "const",
    "kind": "AssignmentStatement",
    "lhs": {
      "kind": "Identifier",
      "name": "stack",
    },
    "rhs": {
      "items": [
        {
          "items": [
            {
              "kind": "NullValue",
            },
            {
              "base": 10,
              "kind": "NumberValue",
              "value": 0,
            },
          ],
          "kind": "ArrayValue",
        },
      ],
      "kind": "ArrayValue",
    },
  },
]
`;

exports[`parseStatement() parser dynamically derived from grammar parses a (default) export class declaration 1`] = `
[
  {
    "declaration": {
      "body": [
        {
          "kind": "PropertyDeclaration",
          "name": "name",
          "type": {
            "kind": "NamedType",
            "name": "string",
          },
        },
        {
          "kind": "PropertyDeclaration",
          "name": "start",
          "type": {
            "kind": "NamedType",
            "name": "number",
          },
        },
        {
          "kind": "PropertyDeclaration",
          "name": "end",
          "type": {
            "kind": "NamedType",
            "name": "number",
          },
        },
        {
          "kind": "PropertyDeclaration",
          "name": "source",
          "type": {
            "kind": "NamedType",
            "name": "string",
          },
        },
        {
          "key": {
            "kind": "Identifier",
            "name": "constructor",
          },
          "kind": "MethodDefinition",
          "value": {
            "arguments": [
              {
                "kind": "Argument",
                "name": "name",
                "type": {
                  "kind": "NamedType",
                  "name": "string",
                },
              },
              {
                "kind": "Argument",
                "name": "start",
                "type": {
                  "kind": "NamedType",
                  "name": "number",
                },
              },
              {
                "kind": "Argument",
                "name": "end",
                "type": {
                  "kind": "NamedType",
                  "name": "number",
                },
              },
              {
                "kind": "Argument",
                "name": "source",
                "type": {
                  "kind": "NamedType",
                  "name": "string",
                },
              },
            ],
            "body": [
              {
                "contents": " No validation, for speed; we trust the generated lexer to be flawless.",
                "kind": "LineComment",
              },
              {
                "expression": {
                  "kind": "BinaryExpression",
                  "lhs": {
                    "kind": "MemberExpression",
                    "object": {
                      "kind": "Identifier",
                      "name": "this",
                    },
                    "property": {
                      "kind": "Identifier",
                      "name": "name",
                    },
                  },
                  "operator": "=",
                  "rhs": {
                    "kind": "Identifier",
                    "name": "name",
                  },
                },
                "kind": "ExpressionStatement",
              },
              {
                "expression": {
                  "kind": "BinaryExpression",
                  "lhs": {
                    "kind": "MemberExpression",
                    "object": {
                      "kind": "Identifier",
                      "name": "this",
                    },
                    "property": {
                      "kind": "Identifier",
                      "name": "start",
                    },
                  },
                  "operator": "=",
                  "rhs": {
                    "kind": "Identifier",
                    "name": "start",
                  },
                },
                "kind": "ExpressionStatement",
              },
              {
                "expression": {
                  "kind": "BinaryExpression",
                  "lhs": {
                    "kind": "MemberExpression",
                    "object": {
                      "kind": "Identifier",
                      "name": "this",
                    },
                    "property": {
                      "kind": "Identifier",
                      "name": "end",
                    },
                  },
                  "operator": "=",
                  "rhs": {
                    "kind": "Identifier",
                    "name": "end",
                  },
                },
                "kind": "ExpressionStatement",
              },
              {
                "expression": {
                  "kind": "BinaryExpression",
                  "lhs": {
                    "kind": "MemberExpression",
                    "object": {
                      "kind": "Identifier",
                      "name": "this",
                    },
                    "property": {
                      "kind": "Identifier",
                      "name": "source",
                    },
                  },
                  "operator": "=",
                  "rhs": {
                    "kind": "Identifier",
                    "name": "source",
                  },
                },
                "kind": "ExpressionStatement",
              },
            ],
            "kind": "FunctionExpression",
          },
        },
        {
          "body": [
            {
              "binding": "const",
              "kind": "AssignmentStatement",
              "lhs": {
                "kind": "Identifier",
                "name": "value",
              },
              "rhs": {
                "arguments": [
                  {
                    "kind": "MemberExpression",
                    "object": {
                      "kind": "Identifier",
                      "name": "this",
                    },
                    "property": {
                      "kind": "Identifier",
                      "name": "start",
                    },
                  },
                  {
                    "kind": "MemberExpression",
                    "object": {
                      "kind": "Identifier",
                      "name": "this",
                    },
                    "property": {
                      "kind": "Identifier",
                      "name": "end",
                    },
                  },
                ],
                "callee": {
                  "kind": "MemberExpression",
                  "object": {
                    "kind": "MemberExpression",
                    "object": {
                      "kind": "Identifier",
                      "name": "this",
                    },
                    "property": {
                      "kind": "Identifier",
                      "name": "source",
                    },
                  },
                  "property": {
                    "kind": "Identifier",
                    "name": "slice",
                  },
                },
                "kind": "CallExpression",
              },
            },
            {
              "expression": {
                "arguments": [
                  {
                    "kind": "Identifier",
                    "name": "this",
                  },
                  {
                    "kind": "StringValue",
                    "value": "'contents'",
                  },
                  {
                    "kind": "ObjectValue",
                    "properties": [
                      {
                        "computed": false,
                        "key": {
                          "kind": "Identifier",
                          "name": "value",
                        },
                        "kind": "ObjectProperty",
                        "shorthand": true,
                        "value": {
                          "kind": "Identifier",
                          "name": "value",
                        },
                      },
                    ],
                  },
                ],
                "callee": {
                  "kind": "MemberExpression",
                  "object": {
                    "kind": "Identifier",
                    "name": "Object",
                  },
                  "property": {
                    "kind": "Identifier",
                    "name": "defineProperty",
                  },
                },
                "kind": "CallExpression",
              },
              "kind": "ExpressionStatement",
            },
            {
              "expression": {
                "kind": "Identifier",
                "name": "value",
              },
              "kind": "ReturnStatement",
            },
          ],
          "kind": "GetAccessor",
          "name": "contents",
        },
      ],
      "id": "Token",
      "kind": "ClassDeclaration",
    },
    "kind": "ExportDefaultDeclaration",
  },
]
`;

exports[`parseStatement() parser persisted to disk parses a const boolean assignment statement 1`] = `
[
  {
    "binding": "const",
    "kind": "AssignmentStatement",
    "lhs": {
      "kind": "Identifier",
      "name": "isFoo",
    },
    "rhs": {
      "kind": "BooleanValue",
      "value": true,
    },
  },
]
`;

exports[`parseStatement() parser persisted to disk parses a let boolean assignment statement 1`] = `
[
  {
    "binding": "let",
    "kind": "AssignmentStatement",
    "lhs": {
      "kind": "Identifier",
      "name": "isFoo",
    },
    "rhs": {
      "kind": "BooleanValue",
      "value": false,
    },
  },
]
`;

exports[`parseStatement() parser persisted to disk parses a const number assignment statement 1`] = `
[
  {
    "binding": "const",
    "kind": "AssignmentStatement",
    "lhs": {
      "kind": "Identifier",
      "name": "isFoo",
    },
    "rhs": {
      "base": 10,
      "kind": "NumberValue",
      "value": 1,
    },
  },
]
`;

exports[`parseStatement() parser persisted to disk parses a let number assignment statement 1`] = `
[
  {
    "binding": "let",
    "kind": "AssignmentStatement",
    "lhs": {
      "kind": "Identifier",
      "name": "isFoo",
    },
    "rhs": {
      "base": 10,
      "kind": "NumberValue",
      "value": 2,
    },
  },
]
`;

exports[`parseStatement() parser persisted to disk parses a const nested array assignment 1`] = `
[
  {
    "binding": "const",
    "kind": "AssignmentStatement",
    "lhs": {
      "kind": "Identifier",
      "name": "stack",
    },
    "rhs": {
      "items": [
        {
          "items": [
            {
              "kind": "NullValue",
            },
            {
              "base": 10,
              "kind": "NumberValue",
              "value": 0,
            },
          ],
          "kind": "ArrayValue",
        },
      ],
      "kind": "ArrayValue",
    },
  },
]
`;

exports[`parseStatement() parser persisted to disk parses a (default) export class declaration 1`] = `
[
  {
    "declaration": {
      "body": [
        {
          "kind": "PropertyDeclaration",
          "name": "name",
          "type": {
            "kind": "NamedType",
            "name": "string",
          },
        },
        {
          "kind": "PropertyDeclaration",
          "name": "start",
          "type": {
            "kind": "NamedType",
            "name": "number",
          },
        },
        {
          "kind": "PropertyDeclaration",
          "name": "end",
          "type": {
            "kind": "NamedType",
            "name": "number",
          },
        },
        {
          "kind": "PropertyDeclaration",
          "name": "source",
          "type": {
            "kind": "NamedType",
            "name": "string",
          },
        },
        {
          "key": {
            "kind": "Identifier",
            "name": "constructor",
          },
          "kind": "MethodDefinition",
          "value": {
            "arguments": [
              {
                "kind": "Argument",
                "name": "name",
                "type": {
                  "kind": "NamedType",
                  "name": "string",
                },
              },
              {
                "kind": "Argument",
                "name": "start",
                "type": {
                  "kind": "NamedType",
                  "name": "number",
                },
              },
              {
                "kind": "Argument",
                "name": "end",
                "type": {
                  "kind": "NamedType",
                  "name": "number",
                },
              },
              {
                "kind": "Argument",
                "name": "source",
                "type": {
                  "kind": "NamedType",
                  "name": "string",
                },
              },
            ],
            "body": [
              {
                "contents": " No validation, for speed; we trust the generated lexer to be flawless.",
                "kind": "LineComment",
              },
              {
                "expression": {
                  "kind": "BinaryExpression",
                  "lhs": {
                    "kind": "MemberExpression",
                    "object": {
                      "kind": "Identifier",
                      "name": "this",
                    },
                    "property": {
                      "kind": "Identifier",
                      "name": "name",
                    },
                  },
                  "operator": "=",
                  "rhs": {
                    "kind": "Identifier",
                    "name": "name",
                  },
                },
                "kind": "ExpressionStatement",
              },
              {
                "expression": {
                  "kind": "BinaryExpression",
                  "lhs": {
                    "kind": "MemberExpression",
                    "object": {
                      "kind": "Identifier",
                      "name": "this",
                    },
                    "property": {
                      "kind": "Identifier",
                      "name": "start",
                    },
                  },
                  "operator": "=",
                  "rhs": {
                    "kind": "Identifier",
                    "name": "start",
                  },
                },
                "kind": "ExpressionStatement",
              },
              {
                "expression": {
                  "kind": "BinaryExpression",
                  "lhs": {
                    "kind": "MemberExpression",
                    "object": {
                      "kind": "Identifier",
                      "name": "this",
                    },
                    "property": {
                      "kind": "Identifier",
                      "name": "end",
                    },
                  },
                  "operator": "=",
                  "rhs": {
                    "kind": "Identifier",
                    "name": "end",
                  },
                },
                "kind": "ExpressionStatement",
              },
              {
                "expression": {
                  "kind": "BinaryExpression",
                  "lhs": {
                    "kind": "MemberExpression",
                    "object": {
                      "kind": "Identifier",
                      "name": "this",
                    },
                    "property": {
                      "kind": "Identifier",
                      "name": "source",
                    },
                  },
                  "operator": "=",
                  "rhs": {
                    "kind": "Identifier",
                    "name": "source",
                  },
                },
                "kind": "ExpressionStatement",
              },
            ],
            "kind": "FunctionExpression",
          },
        },
        {
          "body": [
            {
              "binding": "const",
              "kind": "AssignmentStatement",
              "lhs": {
                "kind": "Identifier",
                "name": "value",
              },
              "rhs": {
                "arguments": [
                  {
                    "kind": "MemberExpression",
                    "object": {
                      "kind": "Identifier",
                      "name": "this",
                    },
                    "property": {
                      "kind": "Identifier",
                      "name": "start",
                    },
                  },
                  {
                    "kind": "MemberExpression",
                    "object": {
                      "kind": "Identifier",
                      "name": "this",
                    },
                    "property": {
                      "kind": "Identifier",
                      "name": "end",
                    },
                  },
                ],
                "callee": {
                  "kind": "MemberExpression",
                  "object": {
                    "kind": "MemberExpression",
                    "object": {
                      "kind": "Identifier",
                      "name": "this",
                    },
                    "property": {
                      "kind": "Identifier",
                      "name": "source",
                    },
                  },
                  "property": {
                    "kind": "Identifier",
                    "name": "slice",
                  },
                },
                "kind": "CallExpression",
              },
            },
            {
              "expression": {
                "arguments": [
                  {
                    "kind": "Identifier",
                    "name": "this",
                  },
                  {
                    "kind": "StringValue",
                    "value": "'contents'",
                  },
                  {
                    "kind": "ObjectValue",
                    "properties": [
                      {
                        "computed": false,
                        "key": {
                          "kind": "Identifier",
                          "name": "value",
                        },
                        "kind": "ObjectProperty",
                        "shorthand": true,
                        "value": {
                          "kind": "Identifier",
                          "name": "value",
                        },
                      },
                    ],
                  },
                ],
                "callee": {
                  "kind": "MemberExpression",
                  "object": {
                    "kind": "Identifier",
                    "name": "Object",
                  },
                  "property": {
                    "kind": "Identifier",
                    "name": "defineProperty",
                  },
                },
                "kind": "CallExpression",
              },
              "kind": "ExpressionStatement",
            },
            {
              "expression": {
                "kind": "Identifier",
                "name": "value",
              },
              "kind": "ReturnStatement",
            },
          ],
          "kind": "GetAccessor",
          "name": "contents",
        },
      ],
      "id": "Token",
      "kind": "ClassDeclaration",
    },
    "kind": "ExportDefaultDeclaration",
  },
]
`;

exports[`parseStatement() parser dynamically derived from grammar parses complex index expressions 1`] = `
[
  {
    "expression": {
      "index": {
        "base": 10,
        "kind": "NumberValue",
        "value": 1,
      },
      "indexee": {
        "index": {
          "kind": "BinaryExpression",
          "lhs": {
            "kind": "MemberExpression",
            "object": {
              "kind": "Identifier",
              "name": "stack",
            },
            "property": {
              "kind": "Identifier",
              "name": "length",
            },
          },
          "operator": "-",
          "rhs": {
            "base": 10,
            "kind": "NumberValue",
            "value": 1,
          },
        },
        "indexee": {
          "kind": "Identifier",
          "name": "stack",
        },
        "kind": "IndexExpression",
      },
      "kind": "IndexExpression",
    },
    "kind": "ExpressionStatement",
  },
]
`;

exports[`parseStatement() parser persisted to disk parses complex index expressions 1`] = `
[
  {
    "expression": {
      "index": {
        "base": 10,
        "kind": "NumberValue",
        "value": 1,
      },
      "indexee": {
        "index": {
          "kind": "BinaryExpression",
          "lhs": {
            "kind": "MemberExpression",
            "object": {
              "kind": "Identifier",
              "name": "stack",
            },
            "property": {
              "kind": "Identifier",
              "name": "length",
            },
          },
          "operator": "-",
          "rhs": {
            "base": 10,
            "kind": "NumberValue",
            "value": 1,
          },
        },
        "indexee": {
          "kind": "Identifier",
          "name": "stack",
        },
        "kind": "IndexExpression",
      },
      "kind": "IndexExpression",
    },
    "kind": "ExpressionStatement",
  },
]
`;

exports[`parseStatement() parser dynamically derived from grammar parses complex index expressions assigned to a local variable 1`] = `
[
  {
    "binding": "const",
    "kind": "AssignmentStatement",
    "lhs": {
      "kind": "Identifier",
      "name": "current",
    },
    "rhs": {
      "index": {
        "base": 10,
        "kind": "NumberValue",
        "value": 1,
      },
      "indexee": {
        "index": {
          "kind": "BinaryExpression",
          "lhs": {
            "kind": "MemberExpression",
            "object": {
              "kind": "Identifier",
              "name": "stack",
            },
            "property": {
              "kind": "Identifier",
              "name": "length",
            },
          },
          "operator": "-",
          "rhs": {
            "base": 10,
            "kind": "NumberValue",
            "value": 1,
          },
        },
        "indexee": {
          "kind": "Identifier",
          "name": "stack",
        },
        "kind": "IndexExpression",
      },
      "kind": "IndexExpression",
    },
  },
]
`;

exports[`parseStatement() parser persisted to disk parses complex index expressions assigned to a local variable 1`] = `
[
  {
    "binding": "const",
    "kind": "AssignmentStatement",
    "lhs": {
      "kind": "Identifier",
      "name": "current",
    },
    "rhs": {
      "index": {
        "base": 10,
        "kind": "NumberValue",
        "value": 1,
      },
      "indexee": {
        "index": {
          "kind": "BinaryExpression",
          "lhs": {
            "kind": "MemberExpression",
            "object": {
              "kind": "Identifier",
              "name": "stack",
            },
            "property": {
              "kind": "Identifier",
              "name": "length",
            },
          },
          "operator": "-",
          "rhs": {
            "base": 10,
            "kind": "NumberValue",
            "value": 1,
          },
        },
        "indexee": {
          "kind": "Identifier",
          "name": "stack",
        },
        "kind": "IndexExpression",
      },
      "kind": "IndexExpression",
    },
  },
]
`;
