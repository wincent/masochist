/**
 * vim: set nomodifiable : DO NOT EDIT - edit "build.ts", run "make typescript" instead
 *
 * @generated
 */
import type {Gotos} from '@masochist/types';
import {Lexer, Token} from './lex';

import type {
  Argument,
  ArrayPattern,
  ArrayValue,
  AssignmentStatement,
  BinaryExpression,
  BooleanValue,
  CallExpression,
  ClassDeclaration,
  Declaration,
  DecrementExpression,
  DocComment,
  EmptySlot,
  ExportDefaultDeclaration,
  Expression,
  ExpressionStatement,
  ForStatement,
  GenericType,
  GetAccessor,
  Identifier,
  IfStatement,
  IncrementExpression,
  IndexExpression,
  LineComment,
  LogicalNotExpression,
  MemberExpression,
  MethodDefinition,
  NamedType,
  NewExpression,
  Node,
  NullValue,
  NumberValue,
  ObjectPattern,
  ObjectProperty,
  ObjectType,
  ObjectTypeIndex,
  ObjectTypeProperty,
  ObjectValue,
  Pattern,
  PrimitiveValue,
  PropertyDeclaration,
  ReturnStatement,
  SpreadElement,
  Statement,
  StringValue,
  ThrowStatement,
  TupleType,
  Type,
  UnionType,
  VariableDeclaration,
  VariableDeclarator,
  WhileStatement,
} from '@masochist/types';

// Intermediate/local types.
type ArgumentList = Array<Argument>;
type AssignmentExpression = {
  kind: 'BinaryExpression';
  lhs: Expression;
  operator: '=';
  rhs: Expression;
};
type ClassBodyList = Array<ClassBodyListItem>;
type ClassBodyListItem =
  | DocComment
  | GetAccessor
  | LineComment
  | MethodDefinition
  | PropertyDeclaration;
type ExpressionList = Array<Expression | SpreadElement>;
type Id = Identifier | Pattern;
type IdentifierList = Array<Identifier | EmptySlot>;
type ObjectPropertyList = Array<ObjectProperty>;
type ObjectTypeMemberList = Array<ObjectTypeMemberListItem>;
type ObjectTypeMemberListItem = ObjectTypeIndex | ObjectTypeProperty;
type OptionalExpressionList = Array<Expression | SpreadElement | EmptySlot>;
type StatementList = Array<Statement>;
type TypeList = Array<Type>;
type VariableDeclaratorList = Array<VariableDeclarator>;

type Production =
  | Node
  | ArgumentList
  | AssignmentExpression
  | ClassBodyList
  | ClassBodyListItem
  | ExpressionList
  | ObjectPropertyList
  | StatementList
  | TypeList;

// TODO: as isStatementList assertion?

function r0(): null {
  return null;
}
function r1($1: Statement): StatementList {
  return [$1];
}
function r2($1: StatementList, $2: Statement): StatementList {
  $1.push($2);
  return $1;
}
function r3(): StatementList {
  return [];
}
function r4($1: AssignmentStatement): Statement {
  return $1;
}
function r5($1: ClassDeclaration): Statement {
  return $1;
}
function r6($1: DocComment): Statement {
  return $1;
}
function r7($1: ExportDefaultDeclaration): Statement {
  return $1;
}
function r8($1: ExpressionStatement): Statement {
  return $1;
}
function r9($1: ForStatement): Statement {
  return $1;
}
function r10($1: IfStatement): Statement {
  return $1;
}
function r11($1: LineComment): Statement {
  return $1;
}
function r12($1: ReturnStatement): Statement {
  return $1;
}
function r13($1: ThrowStatement): Statement {
  return $1;
}
function r14($1: WhileStatement): Statement {
  return $1;
}
function r15(
  _$1: Token,
  $2: Id,
  _$3: Token,
  $4: Type,
  _$5: Token,
  $6: Expression,
): AssignmentStatement {
  return {
    kind: 'AssignmentStatement',
    binding: 'const',
    lhs: $2,
    type: $4,
    rhs: $6,
  };
}
function r16(
  _$1: Token,
  $2: Id,
  _$3: Token,
  $4: Expression,
): AssignmentStatement {
  return {
    kind: 'AssignmentStatement',
    binding: 'const',
    lhs: $2,
    rhs: $4,
  };
}
function r17(
  _$1: Token,
  $2: Id,
  _$3: Token,
  $4: Type,
  _$5: Token,
  $6: Expression,
): AssignmentStatement {
  return {
    kind: 'AssignmentStatement',
    binding: 'let',
    lhs: $2,
    type: $4,
    rhs: $6,
  };
}
function r18(
  _$1: Token,
  $2: Id,
  _$3: Token,
  $4: Expression,
): AssignmentStatement {
  return {
    kind: 'AssignmentStatement',
    binding: 'let',
    lhs: $2,
    rhs: $4,
  };
}
function r19($1: Identifier, _$2: Token, $3: Expression): AssignmentStatement {
  return {
    kind: 'AssignmentStatement',
    binding: null,
    lhs: $1,
    rhs: $3,
  };
}
function r20($1: Identifier): Id {
  return $1;
}
function r21($1: Pattern): Id {
  return $1;
}
function r22($1: ArrayPattern): Pattern {
  return $1;
}
function r23($1: ObjectPattern): Pattern {
  return $1;
}
function r24(_$1: Token, $2: IdentifierList): ArrayPattern {
  return {
    kind: 'ArrayPattern',
    elements: $2,
  };
}
function r25($1: Identifier): IdentifierList {
  return [$1];
}
function r26($1: Identifier): IdentifierList {
  return [$1];
}
function r27(): IdentifierList {
  return [{kind: 'EmptySlot'}];
}
function r28($1: IdentifierList, $2: Identifier): IdentifierList {
  $1.push($2);
  return $1;
}
function r29($1: IdentifierList, $2: Identifier): IdentifierList {
  $1.push($2);
  return $1;
}
function r30($1: IdentifierList): IdentifierList {
  $1.push({kind: 'EmptySlot'});
  return $1;
}
function r31(): IdentifierList {
  return [];
}
function r32(_$1: Token, $2: ObjectPropertyList): ObjectPattern {
  return {
    kind: 'ObjectPattern',
    properties: $2,
  };
}
function r33($1: Token): Identifier {
  return {
    kind: 'Identifier',
    name: $1.contents,
  };
}
function r34($1: Token): Identifier {
  return {
    kind: 'Identifier',
    name: $1.contents,
  };
}
function r35(_$1: Token, $2: Expression): Expression {
  return $2;
}
function r36($1: Expression): Expression {
  return {
    kind: 'NonNullExpression',
    expression: $1,
  };
}
function r37(): Expression {
  return {
    kind: 'Identifier',
    name: 'this',
  };
}
function r38($1: AssignmentExpression): Expression {
  return $1;
}
function r39($1: BinaryExpression): Expression {
  return $1;
}
function r40($1: CallExpression): Expression {
  return $1;
}
function r41($1: DecrementExpression): Expression {
  return $1;
}
function r42($1: IncrementExpression): Expression {
  return $1;
}
function r43($1: Identifier, _$2: Token, $3: Type): Expression {
  return {
    ...$1,
    cast: $3,
  };
}
function r44($1: Identifier): Expression {
  return $1;
}
function r45($1: IndexExpression): Expression {
  return $1;
}
function r46($1: LogicalNotExpression): Expression {
  return $1;
}
function r47($1: MemberExpression): Expression {
  return $1;
}
function r48($1: NewExpression): Expression {
  return $1;
}
function r49($1: ObjectValue): Expression {
  return $1;
}
function r50($1: PrimitiveValue): Expression {
  return $1;
}
function r51($1: Expression, _$2: Token, $3: Expression): AssignmentExpression {
  return {
    kind: 'BinaryExpression',
    lhs: $1,
    operator: '=',
    rhs: $3,
  };
}
function r52($1: Expression, _$2: Token, $3: Expression): BinaryExpression {
  return {
    kind: 'BinaryExpression',
    lhs: $1,
    operator: '>',
    rhs: $3,
  };
}
function r53($1: Expression, _$2: Token, $3: Expression): BinaryExpression {
  return {
    kind: 'BinaryExpression',
    lhs: $1,
    operator: '>=',
    rhs: $3,
  };
}
function r54($1: Expression, _$2: Token, $3: Expression): BinaryExpression {
  return {
    kind: 'BinaryExpression',
    lhs: $1,
    operator: '<',
    rhs: $3,
  };
}
function r55($1: Expression, _$2: Token, $3: Expression): BinaryExpression {
  return {
    kind: 'BinaryExpression',
    lhs: $1,
    operator: '<=',
    rhs: $3,
  };
}
function r56($1: Expression, _$2: Token, $3: Expression): BinaryExpression {
  return {
    kind: 'BinaryExpression',
    lhs: $1,
    operator: '&&',
    rhs: $3,
  };
}
function r57($1: Expression, _$2: Token, $3: Expression): BinaryExpression {
  return {
    kind: 'BinaryExpression',
    lhs: $1,
    operator: '||',
    rhs: $3,
  };
}
function r58($1: Expression, _$2: Token, $3: Expression): BinaryExpression {
  return {
    kind: 'BinaryExpression',
    lhs: $1,
    operator: '-',
    rhs: $3,
  };
}
function r59($1: Expression, _$2: Token, $3: Expression): BinaryExpression {
  return {
    kind: 'BinaryExpression',
    lhs: $1,
    operator: '+',
    rhs: $3,
  };
}
function r60($1: Expression, _$2: Token, $3: Expression): BinaryExpression {
  return {
    kind: 'BinaryExpression',
    lhs: $1,
    operator: '*',
    rhs: $3,
  };
}
function r61($1: Expression, _$2: Token, $3: Expression): BinaryExpression {
  return {
    kind: 'BinaryExpression',
    lhs: $1,
    operator: '==',
    rhs: $3,
  };
}
function r62($1: Expression, _$2: Token, $3: Expression): BinaryExpression {
  return {
    kind: 'BinaryExpression',
    lhs: $1,
    operator: '===',
    rhs: $3,
  };
}
function r63(
  _$1: Token,
  $2: Expression,
  _$3: Token,
  $4: ExpressionList,
): NewExpression {
  return {
    kind: 'NewExpression',
    object: $2,
    arguments: $4,
  };
}
function r64($1: Expression, _$2: Token, $3: ExpressionList): CallExpression {
  return {
    kind: 'CallExpression',
    callee: $1,
    arguments: $3,
  };
}
function r65($1: Expression): ExpressionList {
  return [$1];
}
function r66($1: SpreadElement): ExpressionList {
  return [$1];
}
function r67($1: ExpressionList, _$2: Token, $3: Expression): ExpressionList {
  $1.push($3);
  return $1;
}
function r68(
  $1: ExpressionList,
  _$2: Token,
  $3: SpreadElement,
): ExpressionList {
  $1.push($3);
  return $1;
}
function r69(): ExpressionList {
  return [];
}
function r70(_$1: Token, $2: Expression): SpreadElement {
  return {
    kind: 'SpreadElement',
    expression: $2,
  };
}
function r71(_$1: Token, $2: Expression): DecrementExpression {
  return {
    kind: 'DecrementExpression',
    operand: $2,
    position: 'prefix',
  };
}
function r72($1: Expression): DecrementExpression {
  return {
    kind: 'DecrementExpression',
    operand: $1,
    position: 'postfix',
  };
}
function r73(_$1: Token, $2: Expression): IncrementExpression {
  return {
    kind: 'IncrementExpression',
    operand: $2,
    position: 'prefix',
  };
}
function r74($1: Expression): IncrementExpression {
  return {
    kind: 'IncrementExpression',
    operand: $1,
    position: 'postfix',
  };
}
function r75($1: Expression, _$2: Token, $3: Expression): IndexExpression {
  return {
    kind: 'IndexExpression',
    index: $3,
    indexee: $1,
  };
}
function r76(_$1: Token, $2: Expression): LogicalNotExpression {
  return {
    kind: 'LogicalNotExpression',
    operand: $2,
  };
}
function r77($1: Expression, _$2: Token, $3: Identifier): MemberExpression {
  return {
    kind: 'MemberExpression',
    object: $1,
    property: $3,
  };
}
function r78(_$1: Token, $2: ObjectPropertyList): ObjectValue {
  return {
    kind: 'ObjectValue',
    properties: $2,
  };
}
function r79($1: ObjectProperty): ObjectPropertyList {
  return [$1];
}
function r80(
  $1: ObjectPropertyList,
  _$2: Token,
  $3: ObjectProperty,
): ObjectPropertyList {
  $1.push($3);
  return $1;
}
function r81(): ObjectPropertyList {
  return [];
}
function r82($1: Identifier, _$2: Token, $3: Expression): ObjectProperty {
  return {
    kind: 'ObjectProperty',
    key: $1,
    value: $3,
    computed: false,
    shorthand: false,
  };
}
function r83($1: Identifier): ObjectProperty {
  return {
    kind: 'ObjectProperty',
    key: $1,
    value: $1,
    computed: false,
    shorthand: true,
  };
}
function r84($1: NumberValue, _$2: Token, $3: Expression): ObjectProperty {
  return {
    kind: 'ObjectProperty',
    key: $1,
    value: $3,
    computed: false,
    shorthand: false,
  };
}
function r85(
  _$1: Token,
  $2: Expression,
  _$3: Token,
  _$4: Token,
  $5: Expression,
): ObjectProperty {
  return {
    kind: 'ObjectProperty',
    key: $2,
    value: $5,
    computed: true,
    shorthand: false,
  };
}
function r86($1: ArrayValue): PrimitiveValue {
  return $1;
}
function r87($1: BooleanValue): PrimitiveValue {
  return $1;
}
function r88($1: NullValue): PrimitiveValue {
  return $1;
}
function r89($1: NumberValue): PrimitiveValue {
  return $1;
}
function r90($1: StringValue): PrimitiveValue {
  return $1;
}
function r91(_$1: Token, $2: OptionalExpressionList): ArrayValue {
  return {
    kind: 'ArrayValue',
    items: $2,
  };
}
function r92($1: Expression): OptionalExpressionList {
  return [$1];
}
function r93($1: Expression): OptionalExpressionList {
  return [$1];
}
function r94($1: SpreadElement): OptionalExpressionList {
  return [$1];
}
function r95($1: SpreadElement): OptionalExpressionList {
  return [$1];
}
function r96(): OptionalExpressionList {
  return [{kind: 'EmptySlot'}];
}
function r97(
  $1: OptionalExpressionList,
  $2: Expression,
): OptionalExpressionList {
  $1.push($2);
  return $1;
}
function r98(
  $1: OptionalExpressionList,
  $2: Expression,
): OptionalExpressionList {
  $1.push($2);
  return $1;
}
function r99(
  $1: OptionalExpressionList,
  $2: SpreadElement,
): OptionalExpressionList {
  $1.push($2);
  return $1;
}
function r100(
  $1: OptionalExpressionList,
  $2: SpreadElement,
): OptionalExpressionList {
  $1.push($2);
  return $1;
}
function r101($1: OptionalExpressionList): OptionalExpressionList {
  $1.push({kind: 'EmptySlot'});
  return $1;
}
function r102(): OptionalExpressionList {
  return [];
}
function r103(): BooleanValue {
  return {
    kind: 'BooleanValue',
    value: false,
  };
}
function r104(): BooleanValue {
  return {
    kind: 'BooleanValue',
    value: true,
  };
}
function r105(): NullValue {
  return {
    kind: 'NullValue',
  };
}
function r106($1: Token): NumberValue {
  return {
    kind: 'NumberValue',
    value: parseFloat($1.contents),
    base: 10,
  };
}
function r107($1: Token): StringValue {
  return {
    kind: 'StringValue',
    value: $1.contents,
  };
}
function r108($1: GenericType): Type {
  return $1;
}
function r109($1: NamedType): Type {
  return $1;
}
function r110($1: ObjectType): Type {
  return $1;
}
function r111($1: TupleType): Type {
  return $1;
}
function r112($1: UnionType): Type {
  return $1;
}
function r113($1: Identifier, _$2: Token, $3: TypeList): GenericType {
  return {
    kind: 'GenericType',
    name: $1.name,
    parameters: $3,
  };
}
function r114($1: Type): TypeList {
  return [$1];
}
function r115($1: TypeList, _$2: Token, $3: Type): TypeList {
  $1.push($3);
  return $1;
}
function r116($1: Identifier): NamedType {
  return {
    kind: 'NamedType',
    name: $1.name,
  };
}
function r117($1: Token): NamedType {
  return {
    kind: 'NamedType',
    name: $1.contents,
  };
}
function r118(_$1: Token, $2: ObjectTypeMemberList): ObjectType {
  return {
    kind: 'ObjectType',
    members: $2,
  };
}
function r119($1: ObjectTypeMemberListItem): ObjectTypeMemberList {
  return [$1];
}
function r120(
  $1: ObjectTypeMemberList,
  $2: ObjectTypeMemberListItem,
): ObjectTypeMemberList {
  $1.push($2);
  return $1;
}
function r121(): ObjectTypeMemberList {
  return [];
}
function r122($1: ObjectTypeIndex): ObjectTypeMemberListItem {
  return $1;
}
function r123($1: ObjectTypeProperty): ObjectTypeMemberListItem {
  return $1;
}
function r124(
  _$1: Token,
  $2: Identifier,
  _$3: Token,
  $4: Type,
  _$5: Token,
  _$6: Token,
  $7: Type,
): ObjectTypeIndex {
  return {
    kind: 'ObjectTypeIndex',
    keyName: $2,
    keyType: $4,
    valueType: $7,
  };
}
function r125($1: Identifier, _$2: Token, $3: Type): ObjectTypeProperty {
  return {
    kind: 'ObjectTypeProperty',
    key: $1,
    value: $3,
  };
}
function r126(_$1: Token, $2: TypeList): TupleType {
  return {
    kind: 'TupleType',
    elements: $2,
  };
}
function r127($1: Type, _$2: Token, $3: Type): UnionType {
  return ($1.kind === 'UnionType')
    ? {
      kind: 'UnionType',
      variants: [...$1.variants, $3],
    }
    : {
      kind: 'UnionType',
      variants: [$1, $3],
    };
}
function r128(
  _$1: Token,
  _$2: Token,
  $3: Declaration,
): ExportDefaultDeclaration {
  return {
    kind: 'ExportDefaultDeclaration',
    declaration: $3,
  };
}
function r129($1: ClassDeclaration): Declaration {
  return $1;
}
function r130(
  _$1: Token,
  $2: Identifier,
  _$3: Token,
  $4: ClassBodyList,
): ClassDeclaration {
  return {
    kind: 'ClassDeclaration',
    id: $2.name,
    body: $4,
  };
}
function r131($1: ClassBodyListItem): ClassBodyList {
  return [$1];
}
function r132($1: ClassBodyList, $2: ClassBodyListItem): ClassBodyList {
  $1.push($2);
  return $1;
}
function r133(): ClassBodyList {
  return [];
}
function r134($1: DocComment): ClassBodyListItem {
  return $1;
}
function r135($1: GetAccessor): ClassBodyListItem {
  return $1;
}
function r136($1: LineComment): ClassBodyListItem {
  return $1;
}
function r137($1: MethodDefinition): ClassBodyListItem {
  return $1;
}
function r138($1: PropertyDeclaration): ClassBodyListItem {
  return $1;
}
function r139($1: Token): DocComment {
  const lines = $1.contents.split(/\r?\n/);
  return {
    kind: 'DocComment',
    contents: lines.flatMap(
      (line, i) => {
        if (i === 0 && lines.length === 1) {
          // Only 1 line.
          return line
            .replace(/^\/\*\*/, '')
            .replace(/[ \t]*\*\/$/, '');
        } else if (i === 0) {
          // On first line.
          return line.replace(/^\/\*\*/, '') || [];
        } else if (i === lines.length - 1) {
          // On last line.
          return line.replace(/[ \t]*\*\/$/, '') || [];
        } else {
          return line.replace(/^[ \t]*\*/, '');
        }
      },
    ),
  };
}
function r140(
  _$1: Token,
  $2: Identifier,
  _$3: Token,
  _$4: Token,
  _$5: Token,
  $6: StatementList,
): GetAccessor {
  return {
    kind: 'GetAccessor',
    name: $2.name,
    body: $6,
  };
}
function r141($1: Token): LineComment {
  return {
    kind: 'LineComment',
    contents: $1.contents.slice(2), // Strip leading "//".
  };
}
function r142(
  $1: Identifier,
  _$2: Token,
  $3: ArgumentList,
  _$4: Token,
  _$5: Token,
  $6: StatementList,
): MethodDefinition {
  return {
    kind: 'MethodDefinition',
    key: $1,
    value: {
      kind: 'FunctionExpression',
      arguments: $3,
      body: $6,
    },
  };
}
function r143($1: Argument): ArgumentList {
  return [$1];
}
function r144($1: ArgumentList, _$2: Token, $3: Argument): ArgumentList {
  $1.push($3);
  return $1;
}
function r145(): ArgumentList {
  return [];
}
function r146($1: Identifier): Argument {
  return {
    kind: 'Argument',
    name: $1.name,
  };
}
function r147($1: Identifier, _$2: Token, $3: Type): Argument {
  return {
    kind: 'Argument',
    name: $1.name,
    type: $3,
  };
}
function r148($1: Identifier, _$2: Token, $3: Type): PropertyDeclaration {
  return {
    kind: 'PropertyDeclaration',
    name: $1.name,
    type: $3,
  };
}
function r149($1: Expression): ExpressionStatement {
  return {
    kind: 'ExpressionStatement',
    expression: $1,
  };
}
function r150(
  _$1: Token,
  _$2: Token,
  $3: VariableDeclaration,
  _$4: Token,
  $5: Expression,
  _$6: Token,
  $7: Expression,
  _$8: Token,
  _$9: Token,
  $10: StatementList,
): ForStatement {
  return {
    kind: 'ForStatement',
    initializer: $3,
    condition: $5,
    update: $7,
    block: $10,
  };
}
function r151(_$1: Token, $2: VariableDeclaratorList): VariableDeclaration {
  return {
    kind: 'VariableDeclaration',
    binding: 'let',
    declarators: $2,
  };
}
function r152($1: VariableDeclarator): VariableDeclaratorList {
  return [$1];
}
function r153(
  $1: VariableDeclaratorList,
  $2: VariableDeclarator,
): VariableDeclaratorList {
  $1.push($2);
  return $1;
}
function r154($1: Id, _$2: Token, $3: Expression): VariableDeclarator {
  return {
    kind: 'VariableDeclarator',
    lhs: $1,
    rhs: $3,
  };
}
function r155($1: Id): VariableDeclarator {
  return {
    kind: 'VariableDeclarator',
    lhs: $1,
    rhs: null,
  };
}
function r156(
  _$1: Token,
  _$2: Token,
  $3: Expression,
  _$4: Token,
  _$5: Token,
  $6: StatementList,
  _$7: Token,
  _$8: Token,
  $9: IfStatement,
): IfStatement {
  return {
    kind: 'IfStatement',
    consequents: [{
      kind: 'Consequent',
      condition: $3,
      block: $6,
    }, ...$9.consequents],
  };
}
function r157(
  _$1: Token,
  _$2: Token,
  $3: Expression,
  _$4: Token,
  _$5: Token,
  $6: StatementList,
): IfStatement {
  return {
    kind: 'IfStatement',
    consequents: [{
      kind: 'Consequent',
      condition: $3,
      block: $6,
    }],
  };
}
function r158(_$1: Token, $2: Expression): ThrowStatement {
  return {
    kind: 'ThrowStatement',
    expression: $2,
  };
}
function r159(): ReturnStatement {
  return {
    kind: 'ReturnStatement',
  };
}
function r160(_$1: Token, $2: Expression): ReturnStatement {
  return {
    kind: 'ReturnStatement',
    expression: $2,
  };
}
function r161(
  _$1: Token,
  _$2: Token,
  $3: Expression,
  _$4: Token,
  _$5: Token,
  $6: StatementList,
): WhileStatement {
  return {
    kind: 'WhileStatement',
    condition: $3,
    block: $6,
  };
}
const actions: Array<{[token: string]: number}> = [{
  BANG: 28,
  CLASS: 10,
  CONST: 4,
  DECREMENT: 23,
  DOC_COMMENT: 12,
  EXPORT: 14,
  FALSE: 38,
  FOR: 47,
  GET: 8,
  IDENTIFIER: 7,
  IF: 49,
  INCREMENT: 25,
  LET: 5,
  LINE_COMMENT: 51,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  RETURN: 53,
  STRING_VALUE: 45,
  THIS: 18,
  THROW: 55,
  TRUE: 39,
  WHILE: 57,
  $: -3,
}, {
  $: 0,
  BANG: 28,
  CLASS: 10,
  CONST: 4,
  DECREMENT: 23,
  DOC_COMMENT: 12,
  EXPORT: 14,
  FALSE: 38,
  FOR: 47,
  GET: 8,
  IDENTIFIER: 7,
  IF: 49,
  INCREMENT: 25,
  LET: 5,
  LINE_COMMENT: 51,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  RETURN: 53,
  STRING_VALUE: 45,
  THIS: 18,
  THROW: 55,
  TRUE: 39,
  WHILE: 57,
}, {
  CONST: -1,
  LET: -1,
  CLASS: -1,
  DOC_COMMENT: -1,
  EXPORT: -1,
  FOR: -1,
  IF: -1,
  LINE_COMMENT: -1,
  RETURN: -1,
  THROW: -1,
  WHILE: -1,
  IDENTIFIER: -1,
  GET: -1,
  OPENING_PAREN: -1,
  THIS: -1,
  DECREMENT: -1,
  INCREMENT: -1,
  BANG: -1,
  NEW: -1,
  OPENING_BRACE: -1,
  OPENING_BRACKET: -1,
  FALSE: -1,
  TRUE: -1,
  NULL: -1,
  NUMBER: -1,
  STRING_VALUE: -1,
  $: -1,
  CLOSING_BRACE: -1,
}, {
  CONST: -4,
  LET: -4,
  CLASS: -4,
  DOC_COMMENT: -4,
  EXPORT: -4,
  FOR: -4,
  IF: -4,
  LINE_COMMENT: -4,
  RETURN: -4,
  THROW: -4,
  WHILE: -4,
  IDENTIFIER: -4,
  GET: -4,
  OPENING_PAREN: -4,
  THIS: -4,
  DECREMENT: -4,
  INCREMENT: -4,
  BANG: -4,
  NEW: -4,
  OPENING_BRACE: -4,
  OPENING_BRACKET: -4,
  FALSE: -4,
  TRUE: -4,
  NULL: -4,
  NUMBER: -4,
  STRING_VALUE: -4,
  $: -4,
  CLOSING_BRACE: -4,
}, {
  GET: 8,
  IDENTIFIER: 7,
  OPENING_BRACE: 65,
  OPENING_BRACKET: 63,
}, {
  GET: 8,
  IDENTIFIER: 7,
  OPENING_BRACE: 65,
  OPENING_BRACKET: 63,
}, {
  AS: 68,
  ASSIGN: 67,
  SEMICOLON: -44,
  BANG: -44,
  GREATER_THAN: -44,
  OPENING_PAREN: -44,
  DECREMENT: -44,
  INCREMENT: -44,
  OPENING_BRACKET: -44,
  DOT: -44,
  GREATER_THAN_OR_EQUAL: -44,
  LESS_THAN: -44,
  LESS_THAN_OR_EQUAL: -44,
  LOGICAL_AND: -44,
  LOGICAL_OR: -44,
  MINUS: -44,
  PLUS: -44,
  STAR: -44,
  EQUALS: -44,
  STRICT_EQUALS: -44,
}, {
  ASSIGN: -33,
  AS: -33,
  SEMICOLON: -33,
  BANG: -33,
  GREATER_THAN: -33,
  OPENING_PAREN: -33,
  DECREMENT: -33,
  INCREMENT: -33,
  OPENING_BRACKET: -33,
  DOT: -33,
  GREATER_THAN_OR_EQUAL: -33,
  LESS_THAN: -33,
  LESS_THAN_OR_EQUAL: -33,
  LOGICAL_AND: -33,
  LOGICAL_OR: -33,
  MINUS: -33,
  PLUS: -33,
  STAR: -33,
  EQUALS: -33,
  STRICT_EQUALS: -33,
  COLON: -33,
  OPENING_BRACE: -33,
  CLOSING_PAREN: -33,
  COMMA: -33,
  CLOSING_BRACKET: -33,
  THIS: -33,
  IDENTIFIER: -33,
  GET: -33,
  NEW: -33,
  FALSE: -33,
  TRUE: -33,
  NULL: -33,
  NUMBER: -33,
  STRING_VALUE: -33,
  REST: -33,
  CLOSING_BRACE: -33,
  BITWISE_OR: -33,
}, {
  ASSIGN: -34,
  AS: -34,
  SEMICOLON: -34,
  BANG: -34,
  GREATER_THAN: -34,
  OPENING_PAREN: -34,
  DECREMENT: -34,
  INCREMENT: -34,
  OPENING_BRACKET: -34,
  DOT: -34,
  GREATER_THAN_OR_EQUAL: -34,
  LESS_THAN: -34,
  LESS_THAN_OR_EQUAL: -34,
  LOGICAL_AND: -34,
  LOGICAL_OR: -34,
  MINUS: -34,
  PLUS: -34,
  STAR: -34,
  EQUALS: -34,
  STRICT_EQUALS: -34,
  COLON: -34,
  OPENING_BRACE: -34,
  CLOSING_PAREN: -34,
  COMMA: -34,
  CLOSING_BRACKET: -34,
  THIS: -34,
  IDENTIFIER: -34,
  GET: -34,
  NEW: -34,
  FALSE: -34,
  TRUE: -34,
  NULL: -34,
  NUMBER: -34,
  STRING_VALUE: -34,
  REST: -34,
  CLOSING_BRACE: -34,
  BITWISE_OR: -34,
}, {
  CONST: -5,
  LET: -5,
  CLASS: -5,
  DOC_COMMENT: -5,
  EXPORT: -5,
  FOR: -5,
  IF: -5,
  LINE_COMMENT: -5,
  RETURN: -5,
  THROW: -5,
  WHILE: -5,
  IDENTIFIER: -5,
  GET: -5,
  OPENING_PAREN: -5,
  THIS: -5,
  DECREMENT: -5,
  INCREMENT: -5,
  BANG: -5,
  NEW: -5,
  OPENING_BRACE: -5,
  OPENING_BRACKET: -5,
  FALSE: -5,
  TRUE: -5,
  NULL: -5,
  NUMBER: -5,
  STRING_VALUE: -5,
  $: -5,
  CLOSING_BRACE: -5,
}, {
  GET: 8,
  IDENTIFIER: 7,
}, {
  CONST: -6,
  LET: -6,
  CLASS: -6,
  DOC_COMMENT: -6,
  EXPORT: -6,
  FOR: -6,
  IF: -6,
  LINE_COMMENT: -6,
  RETURN: -6,
  THROW: -6,
  WHILE: -6,
  IDENTIFIER: -6,
  GET: -6,
  OPENING_PAREN: -6,
  THIS: -6,
  DECREMENT: -6,
  INCREMENT: -6,
  BANG: -6,
  NEW: -6,
  OPENING_BRACE: -6,
  OPENING_BRACKET: -6,
  FALSE: -6,
  TRUE: -6,
  NULL: -6,
  NUMBER: -6,
  STRING_VALUE: -6,
  $: -6,
  CLOSING_BRACE: -6,
}, {
  CONST: -139,
  LET: -139,
  CLASS: -139,
  DOC_COMMENT: -139,
  EXPORT: -139,
  FOR: -139,
  IF: -139,
  LINE_COMMENT: -139,
  RETURN: -139,
  THROW: -139,
  WHILE: -139,
  IDENTIFIER: -139,
  GET: -139,
  OPENING_PAREN: -139,
  THIS: -139,
  DECREMENT: -139,
  INCREMENT: -139,
  BANG: -139,
  NEW: -139,
  OPENING_BRACE: -139,
  OPENING_BRACKET: -139,
  FALSE: -139,
  TRUE: -139,
  NULL: -139,
  NUMBER: -139,
  STRING_VALUE: -139,
  $: -139,
  CLOSING_BRACE: -139,
}, {
  CONST: -7,
  LET: -7,
  CLASS: -7,
  DOC_COMMENT: -7,
  EXPORT: -7,
  FOR: -7,
  IF: -7,
  LINE_COMMENT: -7,
  RETURN: -7,
  THROW: -7,
  WHILE: -7,
  IDENTIFIER: -7,
  GET: -7,
  OPENING_PAREN: -7,
  THIS: -7,
  DECREMENT: -7,
  INCREMENT: -7,
  BANG: -7,
  NEW: -7,
  OPENING_BRACE: -7,
  OPENING_BRACKET: -7,
  FALSE: -7,
  TRUE: -7,
  NULL: -7,
  NUMBER: -7,
  STRING_VALUE: -7,
  $: -7,
  CLOSING_BRACE: -7,
}, {
  DEFAULT: 70,
}, {
  CONST: -8,
  LET: -8,
  CLASS: -8,
  DOC_COMMENT: -8,
  EXPORT: -8,
  FOR: -8,
  IF: -8,
  LINE_COMMENT: -8,
  RETURN: -8,
  THROW: -8,
  WHILE: -8,
  IDENTIFIER: -8,
  GET: -8,
  OPENING_PAREN: -8,
  THIS: -8,
  DECREMENT: -8,
  INCREMENT: -8,
  BANG: -8,
  NEW: -8,
  OPENING_BRACE: -8,
  OPENING_BRACKET: -8,
  FALSE: -8,
  TRUE: -8,
  NULL: -8,
  NUMBER: -8,
  STRING_VALUE: -8,
  $: -8,
  CLOSING_BRACE: -8,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  SEMICOLON: 71,
  STAR: 87,
  STRICT_EQUALS: 89,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  SEMICOLON: -37,
  BANG: -37,
  ASSIGN: -37,
  GREATER_THAN: -37,
  OPENING_PAREN: -37,
  DECREMENT: -37,
  INCREMENT: -37,
  OPENING_BRACKET: -37,
  DOT: -37,
  GREATER_THAN_OR_EQUAL: -37,
  LESS_THAN: -37,
  LESS_THAN_OR_EQUAL: -37,
  LOGICAL_AND: -37,
  LOGICAL_OR: -37,
  MINUS: -37,
  PLUS: -37,
  STAR: -37,
  EQUALS: -37,
  STRICT_EQUALS: -37,
  CLOSING_PAREN: -37,
  COMMA: -37,
  CLOSING_BRACKET: -37,
  THIS: -37,
  IDENTIFIER: -37,
  GET: -37,
  NEW: -37,
  OPENING_BRACE: -37,
  FALSE: -37,
  TRUE: -37,
  NULL: -37,
  NUMBER: -37,
  STRING_VALUE: -37,
  REST: -37,
  CLOSING_BRACE: -37,
}, {
  SEMICOLON: -38,
  BANG: -38,
  ASSIGN: -38,
  GREATER_THAN: -38,
  OPENING_PAREN: -38,
  DECREMENT: -38,
  INCREMENT: -38,
  OPENING_BRACKET: -38,
  DOT: -38,
  GREATER_THAN_OR_EQUAL: -38,
  LESS_THAN: -38,
  LESS_THAN_OR_EQUAL: -38,
  LOGICAL_AND: -38,
  LOGICAL_OR: -38,
  MINUS: -38,
  PLUS: -38,
  STAR: -38,
  EQUALS: -38,
  STRICT_EQUALS: -38,
  CLOSING_PAREN: -38,
  COMMA: -38,
  CLOSING_BRACKET: -38,
  THIS: -38,
  IDENTIFIER: -38,
  GET: -38,
  NEW: -38,
  OPENING_BRACE: -38,
  FALSE: -38,
  TRUE: -38,
  NULL: -38,
  NUMBER: -38,
  STRING_VALUE: -38,
  REST: -38,
  CLOSING_BRACE: -38,
}, {
  SEMICOLON: -39,
  BANG: -39,
  ASSIGN: -39,
  GREATER_THAN: -39,
  OPENING_PAREN: -39,
  DECREMENT: -39,
  INCREMENT: -39,
  OPENING_BRACKET: -39,
  DOT: -39,
  GREATER_THAN_OR_EQUAL: -39,
  LESS_THAN: -39,
  LESS_THAN_OR_EQUAL: -39,
  LOGICAL_AND: -39,
  LOGICAL_OR: -39,
  MINUS: -39,
  PLUS: -39,
  STAR: -39,
  EQUALS: -39,
  STRICT_EQUALS: -39,
  CLOSING_PAREN: -39,
  COMMA: -39,
  CLOSING_BRACKET: -39,
  THIS: -39,
  IDENTIFIER: -39,
  GET: -39,
  NEW: -39,
  OPENING_BRACE: -39,
  FALSE: -39,
  TRUE: -39,
  NULL: -39,
  NUMBER: -39,
  STRING_VALUE: -39,
  REST: -39,
  CLOSING_BRACE: -39,
}, {
  SEMICOLON: -40,
  BANG: -40,
  ASSIGN: -40,
  GREATER_THAN: -40,
  OPENING_PAREN: -40,
  DECREMENT: -40,
  INCREMENT: -40,
  OPENING_BRACKET: -40,
  DOT: -40,
  GREATER_THAN_OR_EQUAL: -40,
  LESS_THAN: -40,
  LESS_THAN_OR_EQUAL: -40,
  LOGICAL_AND: -40,
  LOGICAL_OR: -40,
  MINUS: -40,
  PLUS: -40,
  STAR: -40,
  EQUALS: -40,
  STRICT_EQUALS: -40,
  CLOSING_PAREN: -40,
  COMMA: -40,
  CLOSING_BRACKET: -40,
  THIS: -40,
  IDENTIFIER: -40,
  GET: -40,
  NEW: -40,
  OPENING_BRACE: -40,
  FALSE: -40,
  TRUE: -40,
  NULL: -40,
  NUMBER: -40,
  STRING_VALUE: -40,
  REST: -40,
  CLOSING_BRACE: -40,
}, {
  SEMICOLON: -41,
  BANG: -41,
  ASSIGN: -41,
  GREATER_THAN: -41,
  OPENING_PAREN: -41,
  DECREMENT: -41,
  INCREMENT: -41,
  OPENING_BRACKET: -41,
  DOT: -41,
  GREATER_THAN_OR_EQUAL: -41,
  LESS_THAN: -41,
  LESS_THAN_OR_EQUAL: -41,
  LOGICAL_AND: -41,
  LOGICAL_OR: -41,
  MINUS: -41,
  PLUS: -41,
  STAR: -41,
  EQUALS: -41,
  STRICT_EQUALS: -41,
  CLOSING_PAREN: -41,
  COMMA: -41,
  CLOSING_BRACKET: -41,
  THIS: -41,
  IDENTIFIER: -41,
  GET: -41,
  NEW: -41,
  OPENING_BRACE: -41,
  FALSE: -41,
  TRUE: -41,
  NULL: -41,
  NUMBER: -41,
  STRING_VALUE: -41,
  REST: -41,
  CLOSING_BRACE: -41,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  SEMICOLON: -42,
  BANG: -42,
  ASSIGN: -42,
  GREATER_THAN: -42,
  OPENING_PAREN: -42,
  DECREMENT: -42,
  INCREMENT: -42,
  OPENING_BRACKET: -42,
  DOT: -42,
  GREATER_THAN_OR_EQUAL: -42,
  LESS_THAN: -42,
  LESS_THAN_OR_EQUAL: -42,
  LOGICAL_AND: -42,
  LOGICAL_OR: -42,
  MINUS: -42,
  PLUS: -42,
  STAR: -42,
  EQUALS: -42,
  STRICT_EQUALS: -42,
  CLOSING_PAREN: -42,
  COMMA: -42,
  CLOSING_BRACKET: -42,
  THIS: -42,
  IDENTIFIER: -42,
  GET: -42,
  NEW: -42,
  OPENING_BRACE: -42,
  FALSE: -42,
  TRUE: -42,
  NULL: -42,
  NUMBER: -42,
  STRING_VALUE: -42,
  REST: -42,
  CLOSING_BRACE: -42,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  SEMICOLON: -45,
  BANG: -45,
  ASSIGN: -45,
  GREATER_THAN: -45,
  OPENING_PAREN: -45,
  DECREMENT: -45,
  INCREMENT: -45,
  OPENING_BRACKET: -45,
  DOT: -45,
  GREATER_THAN_OR_EQUAL: -45,
  LESS_THAN: -45,
  LESS_THAN_OR_EQUAL: -45,
  LOGICAL_AND: -45,
  LOGICAL_OR: -45,
  MINUS: -45,
  PLUS: -45,
  STAR: -45,
  EQUALS: -45,
  STRICT_EQUALS: -45,
  CLOSING_PAREN: -45,
  COMMA: -45,
  CLOSING_BRACKET: -45,
  THIS: -45,
  IDENTIFIER: -45,
  GET: -45,
  NEW: -45,
  OPENING_BRACE: -45,
  FALSE: -45,
  TRUE: -45,
  NULL: -45,
  NUMBER: -45,
  STRING_VALUE: -45,
  REST: -45,
  CLOSING_BRACE: -45,
}, {
  SEMICOLON: -46,
  BANG: -46,
  ASSIGN: -46,
  GREATER_THAN: -46,
  OPENING_PAREN: -46,
  DECREMENT: -46,
  INCREMENT: -46,
  OPENING_BRACKET: -46,
  DOT: -46,
  GREATER_THAN_OR_EQUAL: -46,
  LESS_THAN: -46,
  LESS_THAN_OR_EQUAL: -46,
  LOGICAL_AND: -46,
  LOGICAL_OR: -46,
  MINUS: -46,
  PLUS: -46,
  STAR: -46,
  EQUALS: -46,
  STRICT_EQUALS: -46,
  CLOSING_PAREN: -46,
  COMMA: -46,
  CLOSING_BRACKET: -46,
  THIS: -46,
  IDENTIFIER: -46,
  GET: -46,
  NEW: -46,
  OPENING_BRACE: -46,
  FALSE: -46,
  TRUE: -46,
  NULL: -46,
  NUMBER: -46,
  STRING_VALUE: -46,
  REST: -46,
  CLOSING_BRACE: -46,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  SEMICOLON: -47,
  BANG: -47,
  ASSIGN: -47,
  GREATER_THAN: -47,
  OPENING_PAREN: -47,
  DECREMENT: -47,
  INCREMENT: -47,
  OPENING_BRACKET: -47,
  DOT: -47,
  GREATER_THAN_OR_EQUAL: -47,
  LESS_THAN: -47,
  LESS_THAN_OR_EQUAL: -47,
  LOGICAL_AND: -47,
  LOGICAL_OR: -47,
  MINUS: -47,
  PLUS: -47,
  STAR: -47,
  EQUALS: -47,
  STRICT_EQUALS: -47,
  CLOSING_PAREN: -47,
  COMMA: -47,
  CLOSING_BRACKET: -47,
  THIS: -47,
  IDENTIFIER: -47,
  GET: -47,
  NEW: -47,
  OPENING_BRACE: -47,
  FALSE: -47,
  TRUE: -47,
  NULL: -47,
  NUMBER: -47,
  STRING_VALUE: -47,
  REST: -47,
  CLOSING_BRACE: -47,
}, {
  SEMICOLON: -48,
  BANG: -48,
  ASSIGN: -48,
  GREATER_THAN: -48,
  OPENING_PAREN: -48,
  DECREMENT: -48,
  INCREMENT: -48,
  OPENING_BRACKET: -48,
  DOT: -48,
  GREATER_THAN_OR_EQUAL: -48,
  LESS_THAN: -48,
  LESS_THAN_OR_EQUAL: -48,
  LOGICAL_AND: -48,
  LOGICAL_OR: -48,
  MINUS: -48,
  PLUS: -48,
  STAR: -48,
  EQUALS: -48,
  STRICT_EQUALS: -48,
  CLOSING_PAREN: -48,
  COMMA: -48,
  CLOSING_BRACKET: -48,
  THIS: -48,
  IDENTIFIER: -48,
  GET: -48,
  NEW: -48,
  OPENING_BRACE: -48,
  FALSE: -48,
  TRUE: -48,
  NULL: -48,
  NUMBER: -48,
  STRING_VALUE: -48,
  REST: -48,
  CLOSING_BRACE: -48,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  SEMICOLON: -49,
  BANG: -49,
  ASSIGN: -49,
  GREATER_THAN: -49,
  OPENING_PAREN: -49,
  DECREMENT: -49,
  INCREMENT: -49,
  OPENING_BRACKET: -49,
  DOT: -49,
  GREATER_THAN_OR_EQUAL: -49,
  LESS_THAN: -49,
  LESS_THAN_OR_EQUAL: -49,
  LOGICAL_AND: -49,
  LOGICAL_OR: -49,
  MINUS: -49,
  PLUS: -49,
  STAR: -49,
  EQUALS: -49,
  STRICT_EQUALS: -49,
  CLOSING_PAREN: -49,
  COMMA: -49,
  CLOSING_BRACKET: -49,
  THIS: -49,
  IDENTIFIER: -49,
  GET: -49,
  NEW: -49,
  OPENING_BRACE: -49,
  FALSE: -49,
  TRUE: -49,
  NULL: -49,
  NUMBER: -49,
  STRING_VALUE: -49,
  REST: -49,
  CLOSING_BRACE: -49,
}, {
  GET: 8,
  IDENTIFIER: 7,
  NUMBER: 43,
  OPENING_BRACKET: 100,
  CLOSING_BRACE: -81,
  COMMA: -81,
}, {
  SEMICOLON: -50,
  BANG: -50,
  ASSIGN: -50,
  GREATER_THAN: -50,
  OPENING_PAREN: -50,
  DECREMENT: -50,
  INCREMENT: -50,
  OPENING_BRACKET: -50,
  DOT: -50,
  GREATER_THAN_OR_EQUAL: -50,
  LESS_THAN: -50,
  LESS_THAN_OR_EQUAL: -50,
  LOGICAL_AND: -50,
  LOGICAL_OR: -50,
  MINUS: -50,
  PLUS: -50,
  STAR: -50,
  EQUALS: -50,
  STRICT_EQUALS: -50,
  CLOSING_PAREN: -50,
  COMMA: -50,
  CLOSING_BRACKET: -50,
  THIS: -50,
  IDENTIFIER: -50,
  GET: -50,
  NEW: -50,
  OPENING_BRACE: -50,
  FALSE: -50,
  TRUE: -50,
  NULL: -50,
  NUMBER: -50,
  STRING_VALUE: -50,
  REST: -50,
  CLOSING_BRACE: -50,
}, {
  SEMICOLON: -86,
  BANG: -86,
  ASSIGN: -86,
  GREATER_THAN: -86,
  OPENING_PAREN: -86,
  DECREMENT: -86,
  INCREMENT: -86,
  OPENING_BRACKET: -86,
  DOT: -86,
  GREATER_THAN_OR_EQUAL: -86,
  LESS_THAN: -86,
  LESS_THAN_OR_EQUAL: -86,
  LOGICAL_AND: -86,
  LOGICAL_OR: -86,
  MINUS: -86,
  PLUS: -86,
  STAR: -86,
  EQUALS: -86,
  STRICT_EQUALS: -86,
  CLOSING_PAREN: -86,
  COMMA: -86,
  CLOSING_BRACKET: -86,
  THIS: -86,
  IDENTIFIER: -86,
  GET: -86,
  NEW: -86,
  OPENING_BRACE: -86,
  FALSE: -86,
  TRUE: -86,
  NULL: -86,
  NUMBER: -86,
  STRING_VALUE: -86,
  REST: -86,
  CLOSING_BRACE: -86,
}, {
  BANG: 28,
  COMMA: 105,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  REST: 104,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
  CLOSING_BRACKET: -102,
}, {
  SEMICOLON: -87,
  BANG: -87,
  ASSIGN: -87,
  GREATER_THAN: -87,
  OPENING_PAREN: -87,
  DECREMENT: -87,
  INCREMENT: -87,
  OPENING_BRACKET: -87,
  DOT: -87,
  GREATER_THAN_OR_EQUAL: -87,
  LESS_THAN: -87,
  LESS_THAN_OR_EQUAL: -87,
  LOGICAL_AND: -87,
  LOGICAL_OR: -87,
  MINUS: -87,
  PLUS: -87,
  STAR: -87,
  EQUALS: -87,
  STRICT_EQUALS: -87,
  CLOSING_PAREN: -87,
  COMMA: -87,
  CLOSING_BRACKET: -87,
  THIS: -87,
  IDENTIFIER: -87,
  GET: -87,
  NEW: -87,
  OPENING_BRACE: -87,
  FALSE: -87,
  TRUE: -87,
  NULL: -87,
  NUMBER: -87,
  STRING_VALUE: -87,
  REST: -87,
  CLOSING_BRACE: -87,
}, {
  SEMICOLON: -103,
  BANG: -103,
  ASSIGN: -103,
  GREATER_THAN: -103,
  OPENING_PAREN: -103,
  DECREMENT: -103,
  INCREMENT: -103,
  OPENING_BRACKET: -103,
  DOT: -103,
  GREATER_THAN_OR_EQUAL: -103,
  LESS_THAN: -103,
  LESS_THAN_OR_EQUAL: -103,
  LOGICAL_AND: -103,
  LOGICAL_OR: -103,
  MINUS: -103,
  PLUS: -103,
  STAR: -103,
  EQUALS: -103,
  STRICT_EQUALS: -103,
  CLOSING_PAREN: -103,
  COMMA: -103,
  CLOSING_BRACKET: -103,
  THIS: -103,
  IDENTIFIER: -103,
  GET: -103,
  NEW: -103,
  OPENING_BRACE: -103,
  FALSE: -103,
  TRUE: -103,
  NULL: -103,
  NUMBER: -103,
  STRING_VALUE: -103,
  REST: -103,
  CLOSING_BRACE: -103,
}, {
  SEMICOLON: -104,
  BANG: -104,
  ASSIGN: -104,
  GREATER_THAN: -104,
  OPENING_PAREN: -104,
  DECREMENT: -104,
  INCREMENT: -104,
  OPENING_BRACKET: -104,
  DOT: -104,
  GREATER_THAN_OR_EQUAL: -104,
  LESS_THAN: -104,
  LESS_THAN_OR_EQUAL: -104,
  LOGICAL_AND: -104,
  LOGICAL_OR: -104,
  MINUS: -104,
  PLUS: -104,
  STAR: -104,
  EQUALS: -104,
  STRICT_EQUALS: -104,
  CLOSING_PAREN: -104,
  COMMA: -104,
  CLOSING_BRACKET: -104,
  THIS: -104,
  IDENTIFIER: -104,
  GET: -104,
  NEW: -104,
  OPENING_BRACE: -104,
  FALSE: -104,
  TRUE: -104,
  NULL: -104,
  NUMBER: -104,
  STRING_VALUE: -104,
  REST: -104,
  CLOSING_BRACE: -104,
}, {
  SEMICOLON: -88,
  BANG: -88,
  ASSIGN: -88,
  GREATER_THAN: -88,
  OPENING_PAREN: -88,
  DECREMENT: -88,
  INCREMENT: -88,
  OPENING_BRACKET: -88,
  DOT: -88,
  GREATER_THAN_OR_EQUAL: -88,
  LESS_THAN: -88,
  LESS_THAN_OR_EQUAL: -88,
  LOGICAL_AND: -88,
  LOGICAL_OR: -88,
  MINUS: -88,
  PLUS: -88,
  STAR: -88,
  EQUALS: -88,
  STRICT_EQUALS: -88,
  CLOSING_PAREN: -88,
  COMMA: -88,
  CLOSING_BRACKET: -88,
  THIS: -88,
  IDENTIFIER: -88,
  GET: -88,
  NEW: -88,
  OPENING_BRACE: -88,
  FALSE: -88,
  TRUE: -88,
  NULL: -88,
  NUMBER: -88,
  STRING_VALUE: -88,
  REST: -88,
  CLOSING_BRACE: -88,
}, {
  SEMICOLON: -105,
  BANG: -105,
  ASSIGN: -105,
  GREATER_THAN: -105,
  OPENING_PAREN: -105,
  DECREMENT: -105,
  INCREMENT: -105,
  OPENING_BRACKET: -105,
  DOT: -105,
  GREATER_THAN_OR_EQUAL: -105,
  LESS_THAN: -105,
  LESS_THAN_OR_EQUAL: -105,
  LOGICAL_AND: -105,
  LOGICAL_OR: -105,
  MINUS: -105,
  PLUS: -105,
  STAR: -105,
  EQUALS: -105,
  STRICT_EQUALS: -105,
  CLOSING_PAREN: -105,
  COMMA: -105,
  CLOSING_BRACKET: -105,
  THIS: -105,
  IDENTIFIER: -105,
  GET: -105,
  NEW: -105,
  OPENING_BRACE: -105,
  FALSE: -105,
  TRUE: -105,
  NULL: -105,
  NUMBER: -105,
  STRING_VALUE: -105,
  REST: -105,
  CLOSING_BRACE: -105,
}, {
  SEMICOLON: -89,
  BANG: -89,
  ASSIGN: -89,
  GREATER_THAN: -89,
  OPENING_PAREN: -89,
  DECREMENT: -89,
  INCREMENT: -89,
  OPENING_BRACKET: -89,
  DOT: -89,
  GREATER_THAN_OR_EQUAL: -89,
  LESS_THAN: -89,
  LESS_THAN_OR_EQUAL: -89,
  LOGICAL_AND: -89,
  LOGICAL_OR: -89,
  MINUS: -89,
  PLUS: -89,
  STAR: -89,
  EQUALS: -89,
  STRICT_EQUALS: -89,
  CLOSING_PAREN: -89,
  COMMA: -89,
  CLOSING_BRACKET: -89,
  THIS: -89,
  IDENTIFIER: -89,
  GET: -89,
  NEW: -89,
  OPENING_BRACE: -89,
  FALSE: -89,
  TRUE: -89,
  NULL: -89,
  NUMBER: -89,
  STRING_VALUE: -89,
  REST: -89,
  CLOSING_BRACE: -89,
}, {
  SEMICOLON: -106,
  BANG: -106,
  ASSIGN: -106,
  GREATER_THAN: -106,
  OPENING_PAREN: -106,
  DECREMENT: -106,
  INCREMENT: -106,
  OPENING_BRACKET: -106,
  DOT: -106,
  GREATER_THAN_OR_EQUAL: -106,
  LESS_THAN: -106,
  LESS_THAN_OR_EQUAL: -106,
  LOGICAL_AND: -106,
  LOGICAL_OR: -106,
  MINUS: -106,
  PLUS: -106,
  STAR: -106,
  EQUALS: -106,
  STRICT_EQUALS: -106,
  CLOSING_PAREN: -106,
  COMMA: -106,
  CLOSING_BRACKET: -106,
  THIS: -106,
  IDENTIFIER: -106,
  GET: -106,
  NEW: -106,
  OPENING_BRACE: -106,
  FALSE: -106,
  TRUE: -106,
  NULL: -106,
  NUMBER: -106,
  STRING_VALUE: -106,
  REST: -106,
  CLOSING_BRACE: -106,
  COLON: -106,
}, {
  SEMICOLON: -90,
  BANG: -90,
  ASSIGN: -90,
  GREATER_THAN: -90,
  OPENING_PAREN: -90,
  DECREMENT: -90,
  INCREMENT: -90,
  OPENING_BRACKET: -90,
  DOT: -90,
  GREATER_THAN_OR_EQUAL: -90,
  LESS_THAN: -90,
  LESS_THAN_OR_EQUAL: -90,
  LOGICAL_AND: -90,
  LOGICAL_OR: -90,
  MINUS: -90,
  PLUS: -90,
  STAR: -90,
  EQUALS: -90,
  STRICT_EQUALS: -90,
  CLOSING_PAREN: -90,
  COMMA: -90,
  CLOSING_BRACKET: -90,
  THIS: -90,
  IDENTIFIER: -90,
  GET: -90,
  NEW: -90,
  OPENING_BRACE: -90,
  FALSE: -90,
  TRUE: -90,
  NULL: -90,
  NUMBER: -90,
  STRING_VALUE: -90,
  REST: -90,
  CLOSING_BRACE: -90,
}, {
  SEMICOLON: -107,
  BANG: -107,
  ASSIGN: -107,
  GREATER_THAN: -107,
  OPENING_PAREN: -107,
  DECREMENT: -107,
  INCREMENT: -107,
  OPENING_BRACKET: -107,
  DOT: -107,
  GREATER_THAN_OR_EQUAL: -107,
  LESS_THAN: -107,
  LESS_THAN_OR_EQUAL: -107,
  LOGICAL_AND: -107,
  LOGICAL_OR: -107,
  MINUS: -107,
  PLUS: -107,
  STAR: -107,
  EQUALS: -107,
  STRICT_EQUALS: -107,
  CLOSING_PAREN: -107,
  COMMA: -107,
  CLOSING_BRACKET: -107,
  THIS: -107,
  IDENTIFIER: -107,
  GET: -107,
  NEW: -107,
  OPENING_BRACE: -107,
  FALSE: -107,
  TRUE: -107,
  NULL: -107,
  NUMBER: -107,
  STRING_VALUE: -107,
  REST: -107,
  CLOSING_BRACE: -107,
}, {
  CONST: -9,
  LET: -9,
  CLASS: -9,
  DOC_COMMENT: -9,
  EXPORT: -9,
  FOR: -9,
  IF: -9,
  LINE_COMMENT: -9,
  RETURN: -9,
  THROW: -9,
  WHILE: -9,
  IDENTIFIER: -9,
  GET: -9,
  OPENING_PAREN: -9,
  THIS: -9,
  DECREMENT: -9,
  INCREMENT: -9,
  BANG: -9,
  NEW: -9,
  OPENING_BRACE: -9,
  OPENING_BRACKET: -9,
  FALSE: -9,
  TRUE: -9,
  NULL: -9,
  NUMBER: -9,
  STRING_VALUE: -9,
  $: -9,
  CLOSING_BRACE: -9,
}, {
  OPENING_PAREN: 106,
}, {
  CONST: -10,
  LET: -10,
  CLASS: -10,
  DOC_COMMENT: -10,
  EXPORT: -10,
  FOR: -10,
  IF: -10,
  LINE_COMMENT: -10,
  RETURN: -10,
  THROW: -10,
  WHILE: -10,
  IDENTIFIER: -10,
  GET: -10,
  OPENING_PAREN: -10,
  THIS: -10,
  DECREMENT: -10,
  INCREMENT: -10,
  BANG: -10,
  NEW: -10,
  OPENING_BRACE: -10,
  OPENING_BRACKET: -10,
  FALSE: -10,
  TRUE: -10,
  NULL: -10,
  NUMBER: -10,
  STRING_VALUE: -10,
  $: -10,
  CLOSING_BRACE: -10,
}, {
  OPENING_PAREN: 107,
}, {
  CONST: -11,
  LET: -11,
  CLASS: -11,
  DOC_COMMENT: -11,
  EXPORT: -11,
  FOR: -11,
  IF: -11,
  LINE_COMMENT: -11,
  RETURN: -11,
  THROW: -11,
  WHILE: -11,
  IDENTIFIER: -11,
  GET: -11,
  OPENING_PAREN: -11,
  THIS: -11,
  DECREMENT: -11,
  INCREMENT: -11,
  BANG: -11,
  NEW: -11,
  OPENING_BRACE: -11,
  OPENING_BRACKET: -11,
  FALSE: -11,
  TRUE: -11,
  NULL: -11,
  NUMBER: -11,
  STRING_VALUE: -11,
  $: -11,
  CLOSING_BRACE: -11,
}, {
  CONST: -141,
  LET: -141,
  CLASS: -141,
  DOC_COMMENT: -141,
  EXPORT: -141,
  FOR: -141,
  IF: -141,
  LINE_COMMENT: -141,
  RETURN: -141,
  THROW: -141,
  WHILE: -141,
  IDENTIFIER: -141,
  GET: -141,
  OPENING_PAREN: -141,
  THIS: -141,
  DECREMENT: -141,
  INCREMENT: -141,
  BANG: -141,
  NEW: -141,
  OPENING_BRACE: -141,
  OPENING_BRACKET: -141,
  FALSE: -141,
  TRUE: -141,
  NULL: -141,
  NUMBER: -141,
  STRING_VALUE: -141,
  $: -141,
  CLOSING_BRACE: -141,
}, {
  CONST: -12,
  LET: -12,
  CLASS: -12,
  DOC_COMMENT: -12,
  EXPORT: -12,
  FOR: -12,
  IF: -12,
  LINE_COMMENT: -12,
  RETURN: -12,
  THROW: -12,
  WHILE: -12,
  IDENTIFIER: -12,
  GET: -12,
  OPENING_PAREN: -12,
  THIS: -12,
  DECREMENT: -12,
  INCREMENT: -12,
  BANG: -12,
  NEW: -12,
  OPENING_BRACE: -12,
  OPENING_BRACKET: -12,
  FALSE: -12,
  TRUE: -12,
  NULL: -12,
  NUMBER: -12,
  STRING_VALUE: -12,
  $: -12,
  CLOSING_BRACE: -12,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  SEMICOLON: 108,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  CONST: -13,
  LET: -13,
  CLASS: -13,
  DOC_COMMENT: -13,
  EXPORT: -13,
  FOR: -13,
  IF: -13,
  LINE_COMMENT: -13,
  RETURN: -13,
  THROW: -13,
  WHILE: -13,
  IDENTIFIER: -13,
  GET: -13,
  OPENING_PAREN: -13,
  THIS: -13,
  DECREMENT: -13,
  INCREMENT: -13,
  BANG: -13,
  NEW: -13,
  OPENING_BRACE: -13,
  OPENING_BRACKET: -13,
  FALSE: -13,
  TRUE: -13,
  NULL: -13,
  NUMBER: -13,
  STRING_VALUE: -13,
  $: -13,
  CLOSING_BRACE: -13,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  CONST: -14,
  LET: -14,
  CLASS: -14,
  DOC_COMMENT: -14,
  EXPORT: -14,
  FOR: -14,
  IF: -14,
  LINE_COMMENT: -14,
  RETURN: -14,
  THROW: -14,
  WHILE: -14,
  IDENTIFIER: -14,
  GET: -14,
  OPENING_PAREN: -14,
  THIS: -14,
  DECREMENT: -14,
  INCREMENT: -14,
  BANG: -14,
  NEW: -14,
  OPENING_BRACE: -14,
  OPENING_BRACKET: -14,
  FALSE: -14,
  TRUE: -14,
  NULL: -14,
  NUMBER: -14,
  STRING_VALUE: -14,
  $: -14,
  CLOSING_BRACE: -14,
}, {
  OPENING_PAREN: 111,
}, {
  CONST: -2,
  LET: -2,
  CLASS: -2,
  DOC_COMMENT: -2,
  EXPORT: -2,
  FOR: -2,
  IF: -2,
  LINE_COMMENT: -2,
  RETURN: -2,
  THROW: -2,
  WHILE: -2,
  IDENTIFIER: -2,
  GET: -2,
  OPENING_PAREN: -2,
  THIS: -2,
  DECREMENT: -2,
  INCREMENT: -2,
  BANG: -2,
  NEW: -2,
  OPENING_BRACE: -2,
  OPENING_BRACKET: -2,
  FALSE: -2,
  TRUE: -2,
  NULL: -2,
  NUMBER: -2,
  STRING_VALUE: -2,
  $: -2,
  CLOSING_BRACE: -2,
}, {
  ASSIGN: 113,
  COLON: 112,
}, {
  COLON: -20,
  ASSIGN: -20,
  IDENTIFIER: -20,
  GET: -20,
  OPENING_BRACKET: -20,
  OPENING_BRACE: -20,
  SEMICOLON: -20,
}, {
  COLON: -21,
  ASSIGN: -21,
  IDENTIFIER: -21,
  GET: -21,
  OPENING_BRACKET: -21,
  OPENING_BRACE: -21,
  SEMICOLON: -21,
}, {
  COLON: -22,
  ASSIGN: -22,
  IDENTIFIER: -22,
  GET: -22,
  OPENING_BRACKET: -22,
  OPENING_BRACE: -22,
  SEMICOLON: -22,
}, {
  COMMA: 116,
  GET: 8,
  IDENTIFIER: 7,
  CLOSING_BRACKET: -31,
}, {
  COLON: -23,
  ASSIGN: -23,
  IDENTIFIER: -23,
  GET: -23,
  OPENING_BRACKET: -23,
  OPENING_BRACE: -23,
  SEMICOLON: -23,
}, {
  GET: 8,
  IDENTIFIER: 7,
  NUMBER: 43,
  OPENING_BRACKET: 100,
  CLOSING_BRACE: -81,
  COMMA: -81,
}, {
  ASSIGN: 119,
  COLON: 118,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  GET: 8,
  IDENTIFIER: 7,
  NULL: 125,
  OPENING_BRACE: 127,
  OPENING_BRACKET: 129,
}, {
  OPENING_BRACE: 131,
}, {
  CLASS: 10,
}, {
  CONST: -149,
  LET: -149,
  CLASS: -149,
  DOC_COMMENT: -149,
  EXPORT: -149,
  FOR: -149,
  IF: -149,
  LINE_COMMENT: -149,
  RETURN: -149,
  THROW: -149,
  WHILE: -149,
  IDENTIFIER: -149,
  GET: -149,
  OPENING_PAREN: -149,
  THIS: -149,
  DECREMENT: -149,
  INCREMENT: -149,
  BANG: -149,
  NEW: -149,
  OPENING_BRACE: -149,
  OPENING_BRACKET: -149,
  FALSE: -149,
  TRUE: -149,
  NULL: -149,
  NUMBER: -149,
  STRING_VALUE: -149,
  $: -149,
  CLOSING_BRACE: -149,
}, {
  SEMICOLON: -36,
  BANG: -36,
  ASSIGN: -36,
  GREATER_THAN: -36,
  OPENING_PAREN: -36,
  DECREMENT: -36,
  INCREMENT: -36,
  OPENING_BRACKET: -36,
  DOT: -36,
  GREATER_THAN_OR_EQUAL: -36,
  LESS_THAN: -36,
  LESS_THAN_OR_EQUAL: -36,
  LOGICAL_AND: -36,
  LOGICAL_OR: -36,
  MINUS: -36,
  PLUS: -36,
  STAR: -36,
  EQUALS: -36,
  STRICT_EQUALS: -36,
  CLOSING_PAREN: -36,
  COMMA: -36,
  CLOSING_BRACKET: -36,
  THIS: -36,
  IDENTIFIER: -36,
  GET: -36,
  NEW: -36,
  OPENING_BRACE: -36,
  FALSE: -36,
  TRUE: -36,
  NULL: -36,
  NUMBER: -36,
  STRING_VALUE: -36,
  REST: -36,
  CLOSING_BRACE: -36,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  REST: 104,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
  CLOSING_PAREN: -69,
  COMMA: -69,
}, {
  SEMICOLON: -72,
  BANG: -72,
  ASSIGN: -72,
  GREATER_THAN: -72,
  OPENING_PAREN: -72,
  DECREMENT: -72,
  INCREMENT: -72,
  OPENING_BRACKET: -72,
  DOT: -72,
  GREATER_THAN_OR_EQUAL: -72,
  LESS_THAN: -72,
  LESS_THAN_OR_EQUAL: -72,
  LOGICAL_AND: -72,
  LOGICAL_OR: -72,
  MINUS: -72,
  PLUS: -72,
  STAR: -72,
  EQUALS: -72,
  STRICT_EQUALS: -72,
  CLOSING_PAREN: -72,
  COMMA: -72,
  CLOSING_BRACKET: -72,
  THIS: -72,
  IDENTIFIER: -72,
  GET: -72,
  NEW: -72,
  OPENING_BRACE: -72,
  FALSE: -72,
  TRUE: -72,
  NULL: -72,
  NUMBER: -72,
  STRING_VALUE: -72,
  REST: -72,
  CLOSING_BRACE: -72,
}, {
  SEMICOLON: -74,
  BANG: -74,
  ASSIGN: -74,
  GREATER_THAN: -74,
  OPENING_PAREN: -74,
  DECREMENT: -74,
  INCREMENT: -74,
  OPENING_BRACKET: -74,
  DOT: -74,
  GREATER_THAN_OR_EQUAL: -74,
  LESS_THAN: -74,
  LESS_THAN_OR_EQUAL: -74,
  LOGICAL_AND: -74,
  LOGICAL_OR: -74,
  MINUS: -74,
  PLUS: -74,
  STAR: -74,
  EQUALS: -74,
  STRICT_EQUALS: -74,
  CLOSING_PAREN: -74,
  COMMA: -74,
  CLOSING_BRACKET: -74,
  THIS: -74,
  IDENTIFIER: -74,
  GET: -74,
  NEW: -74,
  OPENING_BRACE: -74,
  FALSE: -74,
  TRUE: -74,
  NULL: -74,
  NUMBER: -74,
  STRING_VALUE: -74,
  REST: -74,
  CLOSING_BRACE: -74,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  GET: 8,
  IDENTIFIER: 7,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  ASSIGN: 73,
  BANG: 72,
  CLOSING_PAREN: 151,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
}, {
  AS: 68,
  CLOSING_PAREN: -44,
  BANG: -44,
  ASSIGN: -44,
  GREATER_THAN: -44,
  OPENING_PAREN: -44,
  DECREMENT: -44,
  INCREMENT: -44,
  OPENING_BRACKET: -44,
  DOT: -44,
  GREATER_THAN_OR_EQUAL: -44,
  LESS_THAN: -44,
  LESS_THAN_OR_EQUAL: -44,
  LOGICAL_AND: -44,
  LOGICAL_OR: -44,
  MINUS: -44,
  PLUS: -44,
  STAR: -44,
  EQUALS: -44,
  STRICT_EQUALS: -44,
  SEMICOLON: -44,
  COMMA: -44,
  CLOSING_BRACKET: -44,
  THIS: -44,
  IDENTIFIER: -44,
  GET: -44,
  NEW: -44,
  OPENING_BRACE: -44,
  FALSE: -44,
  TRUE: -44,
  NULL: -44,
  NUMBER: -44,
  STRING_VALUE: -44,
  REST: -44,
  CLOSING_BRACE: -44,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  SEMICOLON: -71,
  CLOSING_PAREN: -71,
  COMMA: -71,
  CLOSING_BRACKET: -71,
  THIS: -71,
  IDENTIFIER: -71,
  GET: -71,
  NEW: -71,
  OPENING_BRACE: -71,
  FALSE: -71,
  TRUE: -71,
  NULL: -71,
  NUMBER: -71,
  STRING_VALUE: -71,
  REST: -71,
  CLOSING_BRACE: -71,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  SEMICOLON: -73,
  CLOSING_PAREN: -73,
  COMMA: -73,
  CLOSING_BRACKET: -73,
  THIS: -73,
  IDENTIFIER: -73,
  GET: -73,
  NEW: -73,
  OPENING_BRACE: -73,
  FALSE: -73,
  TRUE: -73,
  NULL: -73,
  NUMBER: -73,
  STRING_VALUE: -73,
  REST: -73,
  CLOSING_BRACE: -73,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  SEMICOLON: -76,
  CLOSING_PAREN: -76,
  COMMA: -76,
  CLOSING_BRACKET: -76,
  THIS: -76,
  IDENTIFIER: -76,
  GET: -76,
  NEW: -76,
  OPENING_BRACE: -76,
  FALSE: -76,
  TRUE: -76,
  NULL: -76,
  NUMBER: -76,
  STRING_VALUE: -76,
  REST: -76,
  CLOSING_BRACE: -76,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 152,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
}, {
  CLOSING_BRACE: 153,
  COMMA: 154,
}, {
  CLOSING_BRACE: -79,
  COMMA: -79,
}, {
  COLON: 155,
  CLOSING_BRACE: -83,
  COMMA: -83,
}, {
  COLON: 156,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  BANG: 28,
  CLOSING_BRACKET: 158,
  COMMA: 161,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  REST: 104,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  ASSIGN: 73,
  BANG: 72,
  COMMA: 162,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  CLOSING_BRACKET: -92,
  THIS: -92,
  IDENTIFIER: -92,
  GET: -92,
  NEW: -92,
  OPENING_BRACE: -92,
  FALSE: -92,
  TRUE: -92,
  NULL: -92,
  NUMBER: -92,
  STRING_VALUE: -92,
  REST: -92,
}, {
  COMMA: 163,
  CLOSING_BRACKET: -94,
  OPENING_PAREN: -94,
  THIS: -94,
  IDENTIFIER: -94,
  GET: -94,
  DECREMENT: -94,
  INCREMENT: -94,
  BANG: -94,
  NEW: -94,
  OPENING_BRACE: -94,
  OPENING_BRACKET: -94,
  FALSE: -94,
  TRUE: -94,
  NULL: -94,
  NUMBER: -94,
  STRING_VALUE: -94,
  REST: -94,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  CLOSING_BRACKET: -96,
  OPENING_PAREN: -96,
  THIS: -96,
  IDENTIFIER: -96,
  GET: -96,
  DECREMENT: -96,
  INCREMENT: -96,
  BANG: -96,
  NEW: -96,
  OPENING_BRACE: -96,
  OPENING_BRACKET: -96,
  FALSE: -96,
  TRUE: -96,
  NULL: -96,
  NUMBER: -96,
  STRING_VALUE: -96,
  REST: -96,
  COMMA: -96,
}, {
  LET: 166,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  CONST: -159,
  LET: -159,
  CLASS: -159,
  DOC_COMMENT: -159,
  EXPORT: -159,
  FOR: -159,
  IF: -159,
  LINE_COMMENT: -159,
  RETURN: -159,
  THROW: -159,
  WHILE: -159,
  IDENTIFIER: -159,
  GET: -159,
  OPENING_PAREN: -159,
  THIS: -159,
  DECREMENT: -159,
  INCREMENT: -159,
  BANG: -159,
  NEW: -159,
  OPENING_BRACE: -159,
  OPENING_BRACKET: -159,
  FALSE: -159,
  TRUE: -159,
  NULL: -159,
  NUMBER: -159,
  STRING_VALUE: -159,
  $: -159,
  CLOSING_BRACE: -159,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  SEMICOLON: 168,
  STAR: 87,
  STRICT_EQUALS: 89,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  SEMICOLON: 169,
  STAR: 87,
  STRICT_EQUALS: 89,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  GET: 8,
  IDENTIFIER: 7,
  NULL: 125,
  OPENING_BRACE: 127,
  OPENING_BRACKET: 129,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  CLOSING_BRACKET: 173,
  COMMA: 175,
  GET: 8,
  IDENTIFIER: 7,
}, {
  COMMA: 176,
  CLOSING_BRACKET: -25,
  IDENTIFIER: -25,
  GET: -25,
}, {
  CLOSING_BRACKET: -27,
  IDENTIFIER: -27,
  GET: -27,
  COMMA: -27,
}, {
  CLOSING_BRACE: 177,
  COMMA: 154,
}, {
  GET: 8,
  IDENTIFIER: 7,
  NULL: 125,
  OPENING_BRACE: 127,
  OPENING_BRACKET: 129,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  SEMICOLON: 180,
  STAR: 87,
  STRICT_EQUALS: 89,
}, {
  BITWISE_OR: 181,
  SEMICOLON: -43,
  BANG: -43,
  ASSIGN: -43,
  GREATER_THAN: -43,
  OPENING_PAREN: -43,
  DECREMENT: -43,
  INCREMENT: -43,
  OPENING_BRACKET: -43,
  DOT: -43,
  GREATER_THAN_OR_EQUAL: -43,
  LESS_THAN: -43,
  LESS_THAN_OR_EQUAL: -43,
  LOGICAL_AND: -43,
  LOGICAL_OR: -43,
  MINUS: -43,
  PLUS: -43,
  STAR: -43,
  EQUALS: -43,
  STRICT_EQUALS: -43,
  CLOSING_PAREN: -43,
  COMMA: -43,
  CLOSING_BRACKET: -43,
  THIS: -43,
  IDENTIFIER: -43,
  GET: -43,
  NEW: -43,
  OPENING_BRACE: -43,
  FALSE: -43,
  TRUE: -43,
  NULL: -43,
  NUMBER: -43,
  STRING_VALUE: -43,
  REST: -43,
  CLOSING_BRACE: -43,
}, {
  BITWISE_OR: -108,
  SEMICOLON: -108,
  BANG: -108,
  ASSIGN: -108,
  GREATER_THAN: -108,
  OPENING_PAREN: -108,
  DECREMENT: -108,
  INCREMENT: -108,
  OPENING_BRACKET: -108,
  DOT: -108,
  GREATER_THAN_OR_EQUAL: -108,
  LESS_THAN: -108,
  LESS_THAN_OR_EQUAL: -108,
  LOGICAL_AND: -108,
  LOGICAL_OR: -108,
  MINUS: -108,
  PLUS: -108,
  STAR: -108,
  EQUALS: -108,
  STRICT_EQUALS: -108,
  CLOSING_PAREN: -108,
  COMMA: -108,
  CLOSING_BRACKET: -108,
  THIS: -108,
  IDENTIFIER: -108,
  GET: -108,
  NEW: -108,
  OPENING_BRACE: -108,
  FALSE: -108,
  TRUE: -108,
  NULL: -108,
  NUMBER: -108,
  STRING_VALUE: -108,
  REST: -108,
  CLOSING_BRACE: -108,
}, {
  LESS_THAN: 182,
  BITWISE_OR: -116,
  SEMICOLON: -116,
  BANG: -116,
  ASSIGN: -116,
  GREATER_THAN: -116,
  OPENING_PAREN: -116,
  DECREMENT: -116,
  INCREMENT: -116,
  OPENING_BRACKET: -116,
  DOT: -116,
  GREATER_THAN_OR_EQUAL: -116,
  LESS_THAN_OR_EQUAL: -116,
  LOGICAL_AND: -116,
  LOGICAL_OR: -116,
  MINUS: -116,
  PLUS: -116,
  STAR: -116,
  EQUALS: -116,
  STRICT_EQUALS: -116,
  CLOSING_PAREN: -116,
  COMMA: -116,
  CLOSING_BRACKET: -116,
  THIS: -116,
  IDENTIFIER: -116,
  GET: -116,
  NEW: -116,
  OPENING_BRACE: -116,
  FALSE: -116,
  TRUE: -116,
  NULL: -116,
  NUMBER: -116,
  STRING_VALUE: -116,
  REST: -116,
  CLOSING_BRACE: -116,
}, {
  BITWISE_OR: -109,
  SEMICOLON: -109,
  BANG: -109,
  ASSIGN: -109,
  GREATER_THAN: -109,
  OPENING_PAREN: -109,
  DECREMENT: -109,
  INCREMENT: -109,
  OPENING_BRACKET: -109,
  DOT: -109,
  GREATER_THAN_OR_EQUAL: -109,
  LESS_THAN: -109,
  LESS_THAN_OR_EQUAL: -109,
  LOGICAL_AND: -109,
  LOGICAL_OR: -109,
  MINUS: -109,
  PLUS: -109,
  STAR: -109,
  EQUALS: -109,
  STRICT_EQUALS: -109,
  CLOSING_PAREN: -109,
  COMMA: -109,
  CLOSING_BRACKET: -109,
  THIS: -109,
  IDENTIFIER: -109,
  GET: -109,
  NEW: -109,
  OPENING_BRACE: -109,
  FALSE: -109,
  TRUE: -109,
  NULL: -109,
  NUMBER: -109,
  STRING_VALUE: -109,
  REST: -109,
  CLOSING_BRACE: -109,
}, {
  BITWISE_OR: -117,
  SEMICOLON: -117,
  BANG: -117,
  ASSIGN: -117,
  GREATER_THAN: -117,
  OPENING_PAREN: -117,
  DECREMENT: -117,
  INCREMENT: -117,
  OPENING_BRACKET: -117,
  DOT: -117,
  GREATER_THAN_OR_EQUAL: -117,
  LESS_THAN: -117,
  LESS_THAN_OR_EQUAL: -117,
  LOGICAL_AND: -117,
  LOGICAL_OR: -117,
  MINUS: -117,
  PLUS: -117,
  STAR: -117,
  EQUALS: -117,
  STRICT_EQUALS: -117,
  CLOSING_PAREN: -117,
  COMMA: -117,
  CLOSING_BRACKET: -117,
  THIS: -117,
  IDENTIFIER: -117,
  GET: -117,
  NEW: -117,
  OPENING_BRACE: -117,
  FALSE: -117,
  TRUE: -117,
  NULL: -117,
  NUMBER: -117,
  STRING_VALUE: -117,
  REST: -117,
  CLOSING_BRACE: -117,
}, {
  BITWISE_OR: -110,
  SEMICOLON: -110,
  BANG: -110,
  ASSIGN: -110,
  GREATER_THAN: -110,
  OPENING_PAREN: -110,
  DECREMENT: -110,
  INCREMENT: -110,
  OPENING_BRACKET: -110,
  DOT: -110,
  GREATER_THAN_OR_EQUAL: -110,
  LESS_THAN: -110,
  LESS_THAN_OR_EQUAL: -110,
  LOGICAL_AND: -110,
  LOGICAL_OR: -110,
  MINUS: -110,
  PLUS: -110,
  STAR: -110,
  EQUALS: -110,
  STRICT_EQUALS: -110,
  CLOSING_PAREN: -110,
  COMMA: -110,
  CLOSING_BRACKET: -110,
  THIS: -110,
  IDENTIFIER: -110,
  GET: -110,
  NEW: -110,
  OPENING_BRACE: -110,
  FALSE: -110,
  TRUE: -110,
  NULL: -110,
  NUMBER: -110,
  STRING_VALUE: -110,
  REST: -110,
  CLOSING_BRACE: -110,
}, {
  GET: 8,
  IDENTIFIER: 7,
  OPENING_BRACKET: 186,
  CLOSING_BRACE: -121,
}, {
  BITWISE_OR: -111,
  SEMICOLON: -111,
  BANG: -111,
  ASSIGN: -111,
  GREATER_THAN: -111,
  OPENING_PAREN: -111,
  DECREMENT: -111,
  INCREMENT: -111,
  OPENING_BRACKET: -111,
  DOT: -111,
  GREATER_THAN_OR_EQUAL: -111,
  LESS_THAN: -111,
  LESS_THAN_OR_EQUAL: -111,
  LOGICAL_AND: -111,
  LOGICAL_OR: -111,
  MINUS: -111,
  PLUS: -111,
  STAR: -111,
  EQUALS: -111,
  STRICT_EQUALS: -111,
  CLOSING_PAREN: -111,
  COMMA: -111,
  CLOSING_BRACKET: -111,
  THIS: -111,
  IDENTIFIER: -111,
  GET: -111,
  NEW: -111,
  OPENING_BRACE: -111,
  FALSE: -111,
  TRUE: -111,
  NULL: -111,
  NUMBER: -111,
  STRING_VALUE: -111,
  REST: -111,
  CLOSING_BRACE: -111,
}, {
  GET: 8,
  IDENTIFIER: 7,
  NULL: 125,
  OPENING_BRACE: 127,
  OPENING_BRACKET: 129,
}, {
  BITWISE_OR: -112,
  SEMICOLON: -112,
  BANG: -112,
  ASSIGN: -112,
  GREATER_THAN: -112,
  OPENING_PAREN: -112,
  DECREMENT: -112,
  INCREMENT: -112,
  OPENING_BRACKET: -112,
  DOT: -112,
  GREATER_THAN_OR_EQUAL: -112,
  LESS_THAN: -112,
  LESS_THAN_OR_EQUAL: -112,
  LOGICAL_AND: -112,
  LOGICAL_OR: -112,
  MINUS: -112,
  PLUS: -112,
  STAR: -112,
  EQUALS: -112,
  STRICT_EQUALS: -112,
  CLOSING_PAREN: -112,
  COMMA: -112,
  CLOSING_BRACKET: -112,
  THIS: -112,
  IDENTIFIER: -112,
  GET: -112,
  NEW: -112,
  OPENING_BRACE: -112,
  FALSE: -112,
  TRUE: -112,
  NULL: -112,
  NUMBER: -112,
  STRING_VALUE: -112,
  REST: -112,
  CLOSING_BRACE: -112,
}, {
  DOC_COMMENT: 12,
  GET: 195,
  IDENTIFIER: 7,
  LINE_COMMENT: 51,
  CLOSING_BRACE: -133,
}, {
  CONST: -128,
  LET: -128,
  CLASS: -128,
  DOC_COMMENT: -128,
  EXPORT: -128,
  FOR: -128,
  IF: -128,
  LINE_COMMENT: -128,
  RETURN: -128,
  THROW: -128,
  WHILE: -128,
  IDENTIFIER: -128,
  GET: -128,
  OPENING_PAREN: -128,
  THIS: -128,
  DECREMENT: -128,
  INCREMENT: -128,
  BANG: -128,
  NEW: -128,
  OPENING_BRACE: -128,
  OPENING_BRACKET: -128,
  FALSE: -128,
  TRUE: -128,
  NULL: -128,
  NUMBER: -128,
  STRING_VALUE: -128,
  $: -128,
  CLOSING_BRACE: -128,
}, {
  CONST: -129,
  LET: -129,
  CLASS: -129,
  DOC_COMMENT: -129,
  EXPORT: -129,
  FOR: -129,
  IF: -129,
  LINE_COMMENT: -129,
  RETURN: -129,
  THROW: -129,
  WHILE: -129,
  IDENTIFIER: -129,
  GET: -129,
  OPENING_PAREN: -129,
  THIS: -129,
  DECREMENT: -129,
  INCREMENT: -129,
  BANG: -129,
  NEW: -129,
  OPENING_BRACE: -129,
  OPENING_BRACKET: -129,
  FALSE: -129,
  TRUE: -129,
  NULL: -129,
  NUMBER: -129,
  STRING_VALUE: -129,
  $: -129,
  CLOSING_BRACE: -129,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  SEMICOLON: -51,
  CLOSING_PAREN: -51,
  COMMA: -51,
  CLOSING_BRACKET: -51,
  THIS: -51,
  IDENTIFIER: -51,
  GET: -51,
  NEW: -51,
  OPENING_BRACE: -51,
  FALSE: -51,
  TRUE: -51,
  NULL: -51,
  NUMBER: -51,
  STRING_VALUE: -51,
  REST: -51,
  CLOSING_BRACE: -51,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  SEMICOLON: -52,
  CLOSING_PAREN: -52,
  COMMA: -52,
  CLOSING_BRACKET: -52,
  THIS: -52,
  IDENTIFIER: -52,
  GET: -52,
  NEW: -52,
  OPENING_BRACE: -52,
  FALSE: -52,
  TRUE: -52,
  NULL: -52,
  NUMBER: -52,
  STRING_VALUE: -52,
  REST: -52,
  CLOSING_BRACE: -52,
}, {
  CLOSING_PAREN: 200,
  COMMA: 201,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  CLOSING_PAREN: -65,
  COMMA: -65,
}, {
  CLOSING_PAREN: -66,
  COMMA: -66,
}, {
  ASSIGN: 73,
  BANG: 72,
  CLOSING_BRACKET: 202,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
}, {
  SEMICOLON: -77,
  BANG: -77,
  ASSIGN: -77,
  GREATER_THAN: -77,
  OPENING_PAREN: -77,
  DECREMENT: -77,
  INCREMENT: -77,
  OPENING_BRACKET: -77,
  DOT: -77,
  GREATER_THAN_OR_EQUAL: -77,
  LESS_THAN: -77,
  LESS_THAN_OR_EQUAL: -77,
  LOGICAL_AND: -77,
  LOGICAL_OR: -77,
  MINUS: -77,
  PLUS: -77,
  STAR: -77,
  EQUALS: -77,
  STRICT_EQUALS: -77,
  CLOSING_PAREN: -77,
  COMMA: -77,
  CLOSING_BRACKET: -77,
  THIS: -77,
  IDENTIFIER: -77,
  GET: -77,
  NEW: -77,
  OPENING_BRACE: -77,
  FALSE: -77,
  TRUE: -77,
  NULL: -77,
  NUMBER: -77,
  STRING_VALUE: -77,
  REST: -77,
  CLOSING_BRACE: -77,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  SEMICOLON: -53,
  CLOSING_PAREN: -53,
  COMMA: -53,
  CLOSING_BRACKET: -53,
  THIS: -53,
  IDENTIFIER: -53,
  GET: -53,
  NEW: -53,
  OPENING_BRACE: -53,
  FALSE: -53,
  TRUE: -53,
  NULL: -53,
  NUMBER: -53,
  STRING_VALUE: -53,
  REST: -53,
  CLOSING_BRACE: -53,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  SEMICOLON: -54,
  CLOSING_PAREN: -54,
  COMMA: -54,
  CLOSING_BRACKET: -54,
  THIS: -54,
  IDENTIFIER: -54,
  GET: -54,
  NEW: -54,
  OPENING_BRACE: -54,
  FALSE: -54,
  TRUE: -54,
  NULL: -54,
  NUMBER: -54,
  STRING_VALUE: -54,
  REST: -54,
  CLOSING_BRACE: -54,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  SEMICOLON: -55,
  CLOSING_PAREN: -55,
  COMMA: -55,
  CLOSING_BRACKET: -55,
  THIS: -55,
  IDENTIFIER: -55,
  GET: -55,
  NEW: -55,
  OPENING_BRACE: -55,
  FALSE: -55,
  TRUE: -55,
  NULL: -55,
  NUMBER: -55,
  STRING_VALUE: -55,
  REST: -55,
  CLOSING_BRACE: -55,
}, {
  ASSIGN: -56,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: -56,
  LOGICAL_OR: -56,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  SEMICOLON: -56,
  CLOSING_PAREN: -56,
  COMMA: -56,
  CLOSING_BRACKET: -56,
  THIS: -56,
  IDENTIFIER: -56,
  GET: -56,
  NEW: -56,
  OPENING_BRACE: -56,
  FALSE: -56,
  TRUE: -56,
  NULL: -56,
  NUMBER: -56,
  STRING_VALUE: -56,
  REST: -56,
  CLOSING_BRACE: -56,
}, {
  ASSIGN: -57,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: -57,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  SEMICOLON: -57,
  CLOSING_PAREN: -57,
  COMMA: -57,
  CLOSING_BRACKET: -57,
  THIS: -57,
  IDENTIFIER: -57,
  GET: -57,
  NEW: -57,
  OPENING_BRACE: -57,
  FALSE: -57,
  TRUE: -57,
  NULL: -57,
  NUMBER: -57,
  STRING_VALUE: -57,
  REST: -57,
  CLOSING_BRACE: -57,
}, {
  ASSIGN: -58,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: -58,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: -58,
  LOGICAL_OR: -58,
  MINUS: -58,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: -58,
  STAR: 87,
  STRICT_EQUALS: -58,
  SEMICOLON: -58,
  CLOSING_PAREN: -58,
  COMMA: -58,
  CLOSING_BRACKET: -58,
  THIS: -58,
  IDENTIFIER: -58,
  GET: -58,
  NEW: -58,
  OPENING_BRACE: -58,
  FALSE: -58,
  TRUE: -58,
  NULL: -58,
  NUMBER: -58,
  STRING_VALUE: -58,
  REST: -58,
  CLOSING_BRACE: -58,
}, {
  ASSIGN: -59,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: -59,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: -59,
  LOGICAL_OR: -59,
  MINUS: -59,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: -59,
  STAR: 87,
  STRICT_EQUALS: -59,
  SEMICOLON: -59,
  CLOSING_PAREN: -59,
  COMMA: -59,
  CLOSING_BRACKET: -59,
  THIS: -59,
  IDENTIFIER: -59,
  GET: -59,
  NEW: -59,
  OPENING_BRACE: -59,
  FALSE: -59,
  TRUE: -59,
  NULL: -59,
  NUMBER: -59,
  STRING_VALUE: -59,
  REST: -59,
  CLOSING_BRACE: -59,
}, {
  ASSIGN: -60,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: -60,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: -60,
  LOGICAL_OR: -60,
  MINUS: -60,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: -60,
  STAR: -60,
  STRICT_EQUALS: -60,
  SEMICOLON: -60,
  CLOSING_PAREN: -60,
  COMMA: -60,
  CLOSING_BRACKET: -60,
  THIS: -60,
  IDENTIFIER: -60,
  GET: -60,
  NEW: -60,
  OPENING_BRACE: -60,
  FALSE: -60,
  TRUE: -60,
  NULL: -60,
  NUMBER: -60,
  STRING_VALUE: -60,
  REST: -60,
  CLOSING_BRACE: -60,
}, {
  ASSIGN: -61,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: -61,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: -61,
  LOGICAL_OR: -61,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: -61,
  SEMICOLON: -61,
  CLOSING_PAREN: -61,
  COMMA: -61,
  CLOSING_BRACKET: -61,
  THIS: -61,
  IDENTIFIER: -61,
  GET: -61,
  NEW: -61,
  OPENING_BRACE: -61,
  FALSE: -61,
  TRUE: -61,
  NULL: -61,
  NUMBER: -61,
  STRING_VALUE: -61,
  REST: -61,
  CLOSING_BRACE: -61,
}, {
  ASSIGN: -62,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: -62,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: -62,
  LOGICAL_OR: -62,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: -62,
  SEMICOLON: -62,
  CLOSING_PAREN: -62,
  COMMA: -62,
  CLOSING_BRACKET: -62,
  THIS: -62,
  IDENTIFIER: -62,
  GET: -62,
  NEW: -62,
  OPENING_BRACE: -62,
  FALSE: -62,
  TRUE: -62,
  NULL: -62,
  NUMBER: -62,
  STRING_VALUE: -62,
  REST: -62,
  CLOSING_BRACE: -62,
}, {
  SEMICOLON: -35,
  BANG: -35,
  ASSIGN: -35,
  GREATER_THAN: -35,
  OPENING_PAREN: -35,
  DECREMENT: -35,
  INCREMENT: -35,
  OPENING_BRACKET: -35,
  DOT: -35,
  GREATER_THAN_OR_EQUAL: -35,
  LESS_THAN: -35,
  LESS_THAN_OR_EQUAL: -35,
  LOGICAL_AND: -35,
  LOGICAL_OR: -35,
  MINUS: -35,
  PLUS: -35,
  STAR: -35,
  EQUALS: -35,
  STRICT_EQUALS: -35,
  CLOSING_PAREN: -35,
  COMMA: -35,
  CLOSING_BRACKET: -35,
  THIS: -35,
  IDENTIFIER: -35,
  GET: -35,
  NEW: -35,
  OPENING_BRACE: -35,
  FALSE: -35,
  TRUE: -35,
  NULL: -35,
  NUMBER: -35,
  STRING_VALUE: -35,
  REST: -35,
  CLOSING_BRACE: -35,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  REST: 104,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
  CLOSING_PAREN: -69,
  COMMA: -69,
}, {
  SEMICOLON: -78,
  BANG: -78,
  ASSIGN: -78,
  GREATER_THAN: -78,
  OPENING_PAREN: -78,
  DECREMENT: -78,
  INCREMENT: -78,
  OPENING_BRACKET: -78,
  DOT: -78,
  GREATER_THAN_OR_EQUAL: -78,
  LESS_THAN: -78,
  LESS_THAN_OR_EQUAL: -78,
  LOGICAL_AND: -78,
  LOGICAL_OR: -78,
  MINUS: -78,
  PLUS: -78,
  STAR: -78,
  EQUALS: -78,
  STRICT_EQUALS: -78,
  CLOSING_PAREN: -78,
  COMMA: -78,
  CLOSING_BRACKET: -78,
  THIS: -78,
  IDENTIFIER: -78,
  GET: -78,
  NEW: -78,
  OPENING_BRACE: -78,
  FALSE: -78,
  TRUE: -78,
  NULL: -78,
  NUMBER: -78,
  STRING_VALUE: -78,
  REST: -78,
  CLOSING_BRACE: -78,
}, {
  GET: 8,
  IDENTIFIER: 7,
  NUMBER: 43,
  OPENING_BRACKET: 100,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  ASSIGN: 73,
  BANG: 72,
  CLOSING_BRACKET: 207,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
}, {
  SEMICOLON: -91,
  BANG: -91,
  ASSIGN: -91,
  GREATER_THAN: -91,
  OPENING_PAREN: -91,
  DECREMENT: -91,
  INCREMENT: -91,
  OPENING_BRACKET: -91,
  DOT: -91,
  GREATER_THAN_OR_EQUAL: -91,
  LESS_THAN: -91,
  LESS_THAN_OR_EQUAL: -91,
  LOGICAL_AND: -91,
  LOGICAL_OR: -91,
  MINUS: -91,
  PLUS: -91,
  STAR: -91,
  EQUALS: -91,
  STRICT_EQUALS: -91,
  CLOSING_PAREN: -91,
  COMMA: -91,
  CLOSING_BRACKET: -91,
  THIS: -91,
  IDENTIFIER: -91,
  GET: -91,
  NEW: -91,
  OPENING_BRACE: -91,
  FALSE: -91,
  TRUE: -91,
  NULL: -91,
  NUMBER: -91,
  STRING_VALUE: -91,
  REST: -91,
  CLOSING_BRACE: -91,
}, {
  ASSIGN: 73,
  BANG: 72,
  COMMA: 208,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  CLOSING_BRACKET: -98,
  THIS: -98,
  IDENTIFIER: -98,
  GET: -98,
  NEW: -98,
  OPENING_BRACE: -98,
  FALSE: -98,
  TRUE: -98,
  NULL: -98,
  NUMBER: -98,
  STRING_VALUE: -98,
  REST: -98,
}, {
  COMMA: 209,
  CLOSING_BRACKET: -100,
  OPENING_PAREN: -100,
  THIS: -100,
  IDENTIFIER: -100,
  GET: -100,
  DECREMENT: -100,
  INCREMENT: -100,
  BANG: -100,
  NEW: -100,
  OPENING_BRACE: -100,
  OPENING_BRACKET: -100,
  FALSE: -100,
  TRUE: -100,
  NULL: -100,
  NUMBER: -100,
  STRING_VALUE: -100,
  REST: -100,
}, {
  CLOSING_BRACKET: -101,
  OPENING_PAREN: -101,
  THIS: -101,
  IDENTIFIER: -101,
  GET: -101,
  DECREMENT: -101,
  INCREMENT: -101,
  BANG: -101,
  NEW: -101,
  OPENING_BRACE: -101,
  OPENING_BRACKET: -101,
  FALSE: -101,
  TRUE: -101,
  NULL: -101,
  NUMBER: -101,
  STRING_VALUE: -101,
  REST: -101,
  COMMA: -101,
}, {
  CLOSING_BRACKET: -93,
  OPENING_PAREN: -93,
  THIS: -93,
  IDENTIFIER: -93,
  GET: -93,
  DECREMENT: -93,
  INCREMENT: -93,
  BANG: -93,
  NEW: -93,
  OPENING_BRACE: -93,
  OPENING_BRACKET: -93,
  FALSE: -93,
  TRUE: -93,
  NULL: -93,
  NUMBER: -93,
  STRING_VALUE: -93,
  REST: -93,
  COMMA: -93,
}, {
  CLOSING_BRACKET: -95,
  OPENING_PAREN: -95,
  THIS: -95,
  IDENTIFIER: -95,
  GET: -95,
  DECREMENT: -95,
  INCREMENT: -95,
  BANG: -95,
  NEW: -95,
  OPENING_BRACE: -95,
  OPENING_BRACKET: -95,
  FALSE: -95,
  TRUE: -95,
  NULL: -95,
  NUMBER: -95,
  STRING_VALUE: -95,
  REST: -95,
  COMMA: -95,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  COMMA: -70,
  CLOSING_BRACKET: -70,
  THIS: -70,
  IDENTIFIER: -70,
  GET: -70,
  NEW: -70,
  OPENING_BRACE: -70,
  FALSE: -70,
  TRUE: -70,
  NULL: -70,
  NUMBER: -70,
  STRING_VALUE: -70,
  REST: -70,
  CLOSING_PAREN: -70,
}, {
  SEMICOLON: 210,
}, {
  GET: 8,
  IDENTIFIER: 7,
  OPENING_BRACE: 65,
  OPENING_BRACKET: 63,
}, {
  ASSIGN: 73,
  BANG: 72,
  CLOSING_PAREN: 214,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
}, {
  CONST: -160,
  LET: -160,
  CLASS: -160,
  DOC_COMMENT: -160,
  EXPORT: -160,
  FOR: -160,
  IF: -160,
  LINE_COMMENT: -160,
  RETURN: -160,
  THROW: -160,
  WHILE: -160,
  IDENTIFIER: -160,
  GET: -160,
  OPENING_PAREN: -160,
  THIS: -160,
  DECREMENT: -160,
  INCREMENT: -160,
  BANG: -160,
  NEW: -160,
  OPENING_BRACE: -160,
  OPENING_BRACKET: -160,
  FALSE: -160,
  TRUE: -160,
  NULL: -160,
  NUMBER: -160,
  STRING_VALUE: -160,
  $: -160,
  CLOSING_BRACE: -160,
}, {
  CONST: -158,
  LET: -158,
  CLASS: -158,
  DOC_COMMENT: -158,
  EXPORT: -158,
  FOR: -158,
  IF: -158,
  LINE_COMMENT: -158,
  RETURN: -158,
  THROW: -158,
  WHILE: -158,
  IDENTIFIER: -158,
  GET: -158,
  OPENING_PAREN: -158,
  THIS: -158,
  DECREMENT: -158,
  INCREMENT: -158,
  BANG: -158,
  NEW: -158,
  OPENING_BRACE: -158,
  OPENING_BRACKET: -158,
  FALSE: -158,
  TRUE: -158,
  NULL: -158,
  NUMBER: -158,
  STRING_VALUE: -158,
  $: -158,
  CLOSING_BRACE: -158,
}, {
  ASSIGN: 73,
  BANG: 72,
  CLOSING_PAREN: 215,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
}, {
  ASSIGN: 216,
  BITWISE_OR: 181,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  SEMICOLON: 217,
  STAR: 87,
  STRICT_EQUALS: 89,
}, {
  COLON: -24,
  ASSIGN: -24,
  IDENTIFIER: -24,
  GET: -24,
  OPENING_BRACKET: -24,
  OPENING_BRACE: -24,
  SEMICOLON: -24,
}, {
  COMMA: 218,
  CLOSING_BRACKET: -29,
  IDENTIFIER: -29,
  GET: -29,
}, {
  CLOSING_BRACKET: -30,
  IDENTIFIER: -30,
  GET: -30,
  COMMA: -30,
}, {
  CLOSING_BRACKET: -26,
  IDENTIFIER: -26,
  GET: -26,
  COMMA: -26,
}, {
  COLON: -32,
  ASSIGN: -32,
  IDENTIFIER: -32,
  GET: -32,
  OPENING_BRACKET: -32,
  OPENING_BRACE: -32,
  SEMICOLON: -32,
}, {
  ASSIGN: 219,
  BITWISE_OR: 181,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  SEMICOLON: 220,
  STAR: 87,
  STRICT_EQUALS: 89,
}, {
  CONST: -19,
  LET: -19,
  CLASS: -19,
  DOC_COMMENT: -19,
  EXPORT: -19,
  FOR: -19,
  IF: -19,
  LINE_COMMENT: -19,
  RETURN: -19,
  THROW: -19,
  WHILE: -19,
  IDENTIFIER: -19,
  GET: -19,
  OPENING_PAREN: -19,
  THIS: -19,
  DECREMENT: -19,
  INCREMENT: -19,
  BANG: -19,
  NEW: -19,
  OPENING_BRACE: -19,
  OPENING_BRACKET: -19,
  FALSE: -19,
  TRUE: -19,
  NULL: -19,
  NUMBER: -19,
  STRING_VALUE: -19,
  $: -19,
  CLOSING_BRACE: -19,
}, {
  GET: 8,
  IDENTIFIER: 7,
  NULL: 125,
  OPENING_BRACE: 127,
  OPENING_BRACKET: 129,
}, {
  GET: 8,
  IDENTIFIER: 7,
  NULL: 125,
  OPENING_BRACE: 127,
  OPENING_BRACKET: 129,
}, {
  CLOSING_BRACE: 223,
  GET: 8,
  IDENTIFIER: 7,
  OPENING_BRACKET: 186,
}, {
  CLOSING_BRACE: -119,
  OPENING_BRACKET: -119,
  IDENTIFIER: -119,
  GET: -119,
}, {
  CLOSING_BRACE: -122,
  OPENING_BRACKET: -122,
  IDENTIFIER: -122,
  GET: -122,
}, {
  GET: 8,
  IDENTIFIER: 7,
}, {
  CLOSING_BRACE: -123,
  OPENING_BRACKET: -123,
  IDENTIFIER: -123,
  GET: -123,
}, {
  COLON: 226,
}, {
  CLOSING_BRACKET: 227,
  COMMA: 228,
}, {
  BITWISE_OR: 181,
  CLOSING_BRACKET: -114,
  COMMA: -114,
  GREATER_THAN: -114,
}, {
  CLOSING_BRACE: 229,
  DOC_COMMENT: 12,
  GET: 195,
  IDENTIFIER: 7,
  LINE_COMMENT: 51,
}, {
  CLOSING_BRACE: -131,
  DOC_COMMENT: -131,
  GET: -131,
  LINE_COMMENT: -131,
  IDENTIFIER: -131,
}, {
  CLOSING_BRACE: -134,
  DOC_COMMENT: -134,
  GET: -134,
  LINE_COMMENT: -134,
  IDENTIFIER: -134,
}, {
  CLOSING_BRACE: -135,
  DOC_COMMENT: -135,
  GET: -135,
  LINE_COMMENT: -135,
  IDENTIFIER: -135,
}, {
  GET: 8,
  IDENTIFIER: 7,
  OPENING_PAREN: -34,
  COLON: -34,
}, {
  CLOSING_BRACE: -136,
  DOC_COMMENT: -136,
  GET: -136,
  LINE_COMMENT: -136,
  IDENTIFIER: -136,
}, {
  CLOSING_BRACE: -137,
  DOC_COMMENT: -137,
  GET: -137,
  LINE_COMMENT: -137,
  IDENTIFIER: -137,
}, {
  COLON: 233,
  OPENING_PAREN: 232,
}, {
  CLOSING_BRACE: -138,
  DOC_COMMENT: -138,
  GET: -138,
  LINE_COMMENT: -138,
  IDENTIFIER: -138,
}, {
  SEMICOLON: -64,
  BANG: -64,
  ASSIGN: -64,
  GREATER_THAN: -64,
  OPENING_PAREN: -64,
  DECREMENT: -64,
  INCREMENT: -64,
  OPENING_BRACKET: -64,
  DOT: -64,
  GREATER_THAN_OR_EQUAL: -64,
  LESS_THAN: -64,
  LESS_THAN_OR_EQUAL: -64,
  LOGICAL_AND: -64,
  LOGICAL_OR: -64,
  MINUS: -64,
  PLUS: -64,
  STAR: -64,
  EQUALS: -64,
  STRICT_EQUALS: -64,
  CLOSING_PAREN: -64,
  COMMA: -64,
  CLOSING_BRACKET: -64,
  THIS: -64,
  IDENTIFIER: -64,
  GET: -64,
  NEW: -64,
  OPENING_BRACE: -64,
  FALSE: -64,
  TRUE: -64,
  NULL: -64,
  NUMBER: -64,
  STRING_VALUE: -64,
  REST: -64,
  CLOSING_BRACE: -64,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  REST: 104,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  SEMICOLON: -75,
  BANG: -75,
  ASSIGN: -75,
  GREATER_THAN: -75,
  OPENING_PAREN: -75,
  DECREMENT: -75,
  INCREMENT: -75,
  OPENING_BRACKET: -75,
  DOT: -75,
  GREATER_THAN_OR_EQUAL: -75,
  LESS_THAN: -75,
  LESS_THAN_OR_EQUAL: -75,
  LOGICAL_AND: -75,
  LOGICAL_OR: -75,
  MINUS: -75,
  PLUS: -75,
  STAR: -75,
  EQUALS: -75,
  STRICT_EQUALS: -75,
  CLOSING_PAREN: -75,
  COMMA: -75,
  CLOSING_BRACKET: -75,
  THIS: -75,
  IDENTIFIER: -75,
  GET: -75,
  NEW: -75,
  OPENING_BRACE: -75,
  FALSE: -75,
  TRUE: -75,
  NULL: -75,
  NUMBER: -75,
  STRING_VALUE: -75,
  REST: -75,
  CLOSING_BRACE: -75,
}, {
  CLOSING_PAREN: 236,
  COMMA: 201,
}, {
  CLOSING_BRACE: -80,
  COMMA: -80,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  CLOSING_BRACE: -82,
  COMMA: -82,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  CLOSING_BRACE: -84,
  COMMA: -84,
}, {
  COLON: 237,
}, {
  CLOSING_BRACKET: -97,
  OPENING_PAREN: -97,
  THIS: -97,
  IDENTIFIER: -97,
  GET: -97,
  DECREMENT: -97,
  INCREMENT: -97,
  BANG: -97,
  NEW: -97,
  OPENING_BRACE: -97,
  OPENING_BRACKET: -97,
  FALSE: -97,
  TRUE: -97,
  NULL: -97,
  NUMBER: -97,
  STRING_VALUE: -97,
  REST: -97,
  COMMA: -97,
}, {
  CLOSING_BRACKET: -99,
  OPENING_PAREN: -99,
  THIS: -99,
  IDENTIFIER: -99,
  GET: -99,
  DECREMENT: -99,
  INCREMENT: -99,
  BANG: -99,
  NEW: -99,
  OPENING_BRACE: -99,
  OPENING_BRACKET: -99,
  FALSE: -99,
  TRUE: -99,
  NULL: -99,
  NUMBER: -99,
  STRING_VALUE: -99,
  REST: -99,
  COMMA: -99,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  GET: 8,
  IDENTIFIER: 7,
  OPENING_BRACE: 65,
  OPENING_BRACKET: 63,
  SEMICOLON: -151,
}, {
  IDENTIFIER: -152,
  GET: -152,
  OPENING_BRACKET: -152,
  OPENING_BRACE: -152,
  SEMICOLON: -152,
}, {
  ASSIGN: 240,
  IDENTIFIER: -155,
  GET: -155,
  OPENING_BRACKET: -155,
  OPENING_BRACE: -155,
  SEMICOLON: -155,
}, {
  OPENING_BRACE: 241,
}, {
  OPENING_BRACE: 242,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  CONST: -16,
  LET: -16,
  CLASS: -16,
  DOC_COMMENT: -16,
  EXPORT: -16,
  FOR: -16,
  IF: -16,
  LINE_COMMENT: -16,
  RETURN: -16,
  THROW: -16,
  WHILE: -16,
  IDENTIFIER: -16,
  GET: -16,
  OPENING_PAREN: -16,
  THIS: -16,
  DECREMENT: -16,
  INCREMENT: -16,
  BANG: -16,
  NEW: -16,
  OPENING_BRACE: -16,
  OPENING_BRACKET: -16,
  FALSE: -16,
  TRUE: -16,
  NULL: -16,
  NUMBER: -16,
  STRING_VALUE: -16,
  $: -16,
  CLOSING_BRACE: -16,
}, {
  CLOSING_BRACKET: -28,
  IDENTIFIER: -28,
  GET: -28,
  COMMA: -28,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  CONST: -18,
  LET: -18,
  CLASS: -18,
  DOC_COMMENT: -18,
  EXPORT: -18,
  FOR: -18,
  IF: -18,
  LINE_COMMENT: -18,
  RETURN: -18,
  THROW: -18,
  WHILE: -18,
  IDENTIFIER: -18,
  GET: -18,
  OPENING_PAREN: -18,
  THIS: -18,
  DECREMENT: -18,
  INCREMENT: -18,
  BANG: -18,
  NEW: -18,
  OPENING_BRACE: -18,
  OPENING_BRACKET: -18,
  FALSE: -18,
  TRUE: -18,
  NULL: -18,
  NUMBER: -18,
  STRING_VALUE: -18,
  $: -18,
  CLOSING_BRACE: -18,
}, {
  BITWISE_OR: -127,
  SEMICOLON: -127,
  BANG: -127,
  ASSIGN: -127,
  GREATER_THAN: -127,
  OPENING_PAREN: -127,
  DECREMENT: -127,
  INCREMENT: -127,
  OPENING_BRACKET: -127,
  DOT: -127,
  GREATER_THAN_OR_EQUAL: -127,
  LESS_THAN: -127,
  LESS_THAN_OR_EQUAL: -127,
  LOGICAL_AND: -127,
  LOGICAL_OR: -127,
  MINUS: -127,
  PLUS: -127,
  STAR: -127,
  EQUALS: -127,
  STRICT_EQUALS: -127,
  CLOSING_PAREN: -127,
  COMMA: -127,
  CLOSING_BRACKET: -127,
  THIS: -127,
  IDENTIFIER: -127,
  GET: -127,
  NEW: -127,
  OPENING_BRACE: -127,
  FALSE: -127,
  TRUE: -127,
  NULL: -127,
  NUMBER: -127,
  STRING_VALUE: -127,
  REST: -127,
  CLOSING_BRACE: -127,
}, {
  COMMA: 228,
  GREATER_THAN: 245,
}, {
  BITWISE_OR: -118,
  SEMICOLON: -118,
  BANG: -118,
  ASSIGN: -118,
  GREATER_THAN: -118,
  OPENING_PAREN: -118,
  DECREMENT: -118,
  INCREMENT: -118,
  OPENING_BRACKET: -118,
  DOT: -118,
  GREATER_THAN_OR_EQUAL: -118,
  LESS_THAN: -118,
  LESS_THAN_OR_EQUAL: -118,
  LOGICAL_AND: -118,
  LOGICAL_OR: -118,
  MINUS: -118,
  PLUS: -118,
  STAR: -118,
  EQUALS: -118,
  STRICT_EQUALS: -118,
  CLOSING_PAREN: -118,
  COMMA: -118,
  CLOSING_BRACKET: -118,
  THIS: -118,
  IDENTIFIER: -118,
  GET: -118,
  NEW: -118,
  OPENING_BRACE: -118,
  FALSE: -118,
  TRUE: -118,
  NULL: -118,
  NUMBER: -118,
  STRING_VALUE: -118,
  REST: -118,
  CLOSING_BRACE: -118,
}, {
  CLOSING_BRACE: -120,
  OPENING_BRACKET: -120,
  IDENTIFIER: -120,
  GET: -120,
}, {
  COLON: 246,
}, {
  GET: 8,
  IDENTIFIER: 7,
  NULL: 125,
  OPENING_BRACE: 127,
  OPENING_BRACKET: 129,
}, {
  BITWISE_OR: -126,
  SEMICOLON: -126,
  BANG: -126,
  ASSIGN: -126,
  GREATER_THAN: -126,
  OPENING_PAREN: -126,
  DECREMENT: -126,
  INCREMENT: -126,
  OPENING_BRACKET: -126,
  DOT: -126,
  GREATER_THAN_OR_EQUAL: -126,
  LESS_THAN: -126,
  LESS_THAN_OR_EQUAL: -126,
  LOGICAL_AND: -126,
  LOGICAL_OR: -126,
  MINUS: -126,
  PLUS: -126,
  STAR: -126,
  EQUALS: -126,
  STRICT_EQUALS: -126,
  CLOSING_PAREN: -126,
  COMMA: -126,
  CLOSING_BRACKET: -126,
  THIS: -126,
  IDENTIFIER: -126,
  GET: -126,
  NEW: -126,
  OPENING_BRACE: -126,
  FALSE: -126,
  TRUE: -126,
  NULL: -126,
  NUMBER: -126,
  STRING_VALUE: -126,
  REST: -126,
  CLOSING_BRACE: -126,
}, {
  GET: 8,
  IDENTIFIER: 7,
  NULL: 125,
  OPENING_BRACE: 127,
  OPENING_BRACKET: 129,
}, {
  CONST: -130,
  LET: -130,
  CLASS: -130,
  DOC_COMMENT: -130,
  EXPORT: -130,
  FOR: -130,
  IF: -130,
  LINE_COMMENT: -130,
  RETURN: -130,
  THROW: -130,
  WHILE: -130,
  IDENTIFIER: -130,
  GET: -130,
  OPENING_PAREN: -130,
  THIS: -130,
  DECREMENT: -130,
  INCREMENT: -130,
  BANG: -130,
  NEW: -130,
  OPENING_BRACE: -130,
  OPENING_BRACKET: -130,
  FALSE: -130,
  TRUE: -130,
  NULL: -130,
  NUMBER: -130,
  STRING_VALUE: -130,
  $: -130,
  CLOSING_BRACE: -130,
}, {
  CLOSING_BRACE: -132,
  DOC_COMMENT: -132,
  GET: -132,
  LINE_COMMENT: -132,
  IDENTIFIER: -132,
}, {
  OPENING_PAREN: 249,
}, {
  GET: 8,
  IDENTIFIER: 7,
  CLOSING_PAREN: -145,
  COMMA: -145,
}, {
  GET: 8,
  IDENTIFIER: 7,
  NULL: 125,
  OPENING_BRACE: 127,
  OPENING_BRACKET: 129,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  CLOSING_PAREN: -67,
  COMMA: -67,
}, {
  CLOSING_PAREN: -68,
  COMMA: -68,
}, {
  SEMICOLON: -63,
  BANG: -63,
  ASSIGN: -63,
  GREATER_THAN: -63,
  OPENING_PAREN: -63,
  DECREMENT: -63,
  INCREMENT: -63,
  OPENING_BRACKET: -63,
  DOT: -63,
  GREATER_THAN_OR_EQUAL: -63,
  LESS_THAN: -63,
  LESS_THAN_OR_EQUAL: -63,
  LOGICAL_AND: -63,
  LOGICAL_OR: -63,
  MINUS: -63,
  PLUS: -63,
  STAR: -63,
  EQUALS: -63,
  STRICT_EQUALS: -63,
  CLOSING_PAREN: -63,
  COMMA: -63,
  CLOSING_BRACKET: -63,
  THIS: -63,
  IDENTIFIER: -63,
  GET: -63,
  NEW: -63,
  OPENING_BRACE: -63,
  FALSE: -63,
  TRUE: -63,
  NULL: -63,
  NUMBER: -63,
  STRING_VALUE: -63,
  REST: -63,
  CLOSING_BRACE: -63,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  SEMICOLON: 255,
  STAR: 87,
  STRICT_EQUALS: 89,
}, {
  IDENTIFIER: -153,
  GET: -153,
  OPENING_BRACKET: -153,
  OPENING_BRACE: -153,
  SEMICOLON: -153,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  BANG: 28,
  CLASS: 10,
  CONST: 4,
  DECREMENT: 23,
  DOC_COMMENT: 12,
  EXPORT: 14,
  FALSE: 38,
  FOR: 47,
  GET: 8,
  IDENTIFIER: 7,
  IF: 49,
  INCREMENT: 25,
  LET: 5,
  LINE_COMMENT: 51,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  RETURN: 53,
  STRING_VALUE: 45,
  THIS: 18,
  THROW: 55,
  TRUE: 39,
  WHILE: 57,
  CLOSING_BRACE: -3,
}, {
  BANG: 28,
  CLASS: 10,
  CONST: 4,
  DECREMENT: 23,
  DOC_COMMENT: 12,
  EXPORT: 14,
  FALSE: 38,
  FOR: 47,
  GET: 8,
  IDENTIFIER: 7,
  IF: 49,
  INCREMENT: 25,
  LET: 5,
  LINE_COMMENT: 51,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  RETURN: 53,
  STRING_VALUE: 45,
  THIS: 18,
  THROW: 55,
  TRUE: 39,
  WHILE: 57,
  CLOSING_BRACE: -3,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  SEMICOLON: 259,
  STAR: 87,
  STRICT_EQUALS: 89,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  SEMICOLON: 260,
  STAR: 87,
  STRICT_EQUALS: 89,
}, {
  BITWISE_OR: -113,
  SEMICOLON: -113,
  BANG: -113,
  ASSIGN: -113,
  GREATER_THAN: -113,
  OPENING_PAREN: -113,
  DECREMENT: -113,
  INCREMENT: -113,
  OPENING_BRACKET: -113,
  DOT: -113,
  GREATER_THAN_OR_EQUAL: -113,
  LESS_THAN: -113,
  LESS_THAN_OR_EQUAL: -113,
  LOGICAL_AND: -113,
  LOGICAL_OR: -113,
  MINUS: -113,
  PLUS: -113,
  STAR: -113,
  EQUALS: -113,
  STRICT_EQUALS: -113,
  CLOSING_PAREN: -113,
  COMMA: -113,
  CLOSING_BRACKET: -113,
  THIS: -113,
  IDENTIFIER: -113,
  GET: -113,
  NEW: -113,
  OPENING_BRACE: -113,
  FALSE: -113,
  TRUE: -113,
  NULL: -113,
  NUMBER: -113,
  STRING_VALUE: -113,
  REST: -113,
  CLOSING_BRACE: -113,
}, {
  GET: 8,
  IDENTIFIER: 7,
  NULL: 125,
  OPENING_BRACE: 127,
  OPENING_BRACKET: 129,
}, {
  BITWISE_OR: 181,
  SEMICOLON: 262,
}, {
  BITWISE_OR: 181,
  CLOSING_BRACKET: -115,
  COMMA: -115,
  GREATER_THAN: -115,
}, {
  CLOSING_PAREN: 263,
}, {
  CLOSING_PAREN: 264,
  COMMA: 265,
}, {
  CLOSING_PAREN: -143,
  COMMA: -143,
}, {
  COLON: 266,
  CLOSING_PAREN: -146,
  COMMA: -146,
}, {
  BITWISE_OR: 181,
  SEMICOLON: 267,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  CLOSING_BRACE: -85,
  COMMA: -85,
}, {
  BANG: 28,
  DECREMENT: 23,
  FALSE: 38,
  GET: 8,
  IDENTIFIER: 7,
  INCREMENT: 25,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  STRING_VALUE: 45,
  THIS: 18,
  TRUE: 39,
}, {
  ASSIGN: 73,
  BANG: 72,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
  IDENTIFIER: -154,
  GET: -154,
  OPENING_BRACE: -154,
  SEMICOLON: -154,
}, {
  BANG: 28,
  CLASS: 10,
  CLOSING_BRACE: 269,
  CONST: 4,
  DECREMENT: 23,
  DOC_COMMENT: 12,
  EXPORT: 14,
  FALSE: 38,
  FOR: 47,
  GET: 8,
  IDENTIFIER: 7,
  IF: 49,
  INCREMENT: 25,
  LET: 5,
  LINE_COMMENT: 51,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  RETURN: 53,
  STRING_VALUE: 45,
  THIS: 18,
  THROW: 55,
  TRUE: 39,
  WHILE: 57,
}, {
  BANG: 28,
  CLASS: 10,
  CLOSING_BRACE: 270,
  CONST: 4,
  DECREMENT: 23,
  DOC_COMMENT: 12,
  EXPORT: 14,
  FALSE: 38,
  FOR: 47,
  GET: 8,
  IDENTIFIER: 7,
  IF: 49,
  INCREMENT: 25,
  LET: 5,
  LINE_COMMENT: 51,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  RETURN: 53,
  STRING_VALUE: 45,
  THIS: 18,
  THROW: 55,
  TRUE: 39,
  WHILE: 57,
}, {
  CONST: -15,
  LET: -15,
  CLASS: -15,
  DOC_COMMENT: -15,
  EXPORT: -15,
  FOR: -15,
  IF: -15,
  LINE_COMMENT: -15,
  RETURN: -15,
  THROW: -15,
  WHILE: -15,
  IDENTIFIER: -15,
  GET: -15,
  OPENING_PAREN: -15,
  THIS: -15,
  DECREMENT: -15,
  INCREMENT: -15,
  BANG: -15,
  NEW: -15,
  OPENING_BRACE: -15,
  OPENING_BRACKET: -15,
  FALSE: -15,
  TRUE: -15,
  NULL: -15,
  NUMBER: -15,
  STRING_VALUE: -15,
  $: -15,
  CLOSING_BRACE: -15,
}, {
  CONST: -17,
  LET: -17,
  CLASS: -17,
  DOC_COMMENT: -17,
  EXPORT: -17,
  FOR: -17,
  IF: -17,
  LINE_COMMENT: -17,
  RETURN: -17,
  THROW: -17,
  WHILE: -17,
  IDENTIFIER: -17,
  GET: -17,
  OPENING_PAREN: -17,
  THIS: -17,
  DECREMENT: -17,
  INCREMENT: -17,
  BANG: -17,
  NEW: -17,
  OPENING_BRACE: -17,
  OPENING_BRACKET: -17,
  FALSE: -17,
  TRUE: -17,
  NULL: -17,
  NUMBER: -17,
  STRING_VALUE: -17,
  $: -17,
  CLOSING_BRACE: -17,
}, {
  BITWISE_OR: 181,
  CLOSING_BRACKET: 271,
}, {
  CLOSING_BRACE: -125,
  OPENING_BRACKET: -125,
  IDENTIFIER: -125,
  GET: -125,
}, {
  OPENING_BRACE: 272,
}, {
  OPENING_BRACE: 273,
}, {
  GET: 8,
  IDENTIFIER: 7,
}, {
  GET: 8,
  IDENTIFIER: 7,
  NULL: 125,
  OPENING_BRACE: 127,
  OPENING_BRACKET: 129,
}, {
  CLOSING_BRACE: -148,
  DOC_COMMENT: -148,
  GET: -148,
  LINE_COMMENT: -148,
  IDENTIFIER: -148,
}, {
  ASSIGN: 73,
  BANG: 72,
  CLOSING_PAREN: 276,
  DECREMENT: 76,
  DOT: 79,
  EQUALS: 88,
  GREATER_THAN: 74,
  GREATER_THAN_OR_EQUAL: 80,
  INCREMENT: 77,
  LESS_THAN: 81,
  LESS_THAN_OR_EQUAL: 82,
  LOGICAL_AND: 83,
  LOGICAL_OR: 84,
  MINUS: 85,
  OPENING_BRACKET: 78,
  OPENING_PAREN: 75,
  PLUS: 86,
  STAR: 87,
  STRICT_EQUALS: 89,
}, {
  ELSE: 277,
  CONST: -157,
  LET: -157,
  CLASS: -157,
  DOC_COMMENT: -157,
  EXPORT: -157,
  FOR: -157,
  IF: -157,
  LINE_COMMENT: -157,
  RETURN: -157,
  THROW: -157,
  WHILE: -157,
  IDENTIFIER: -157,
  GET: -157,
  OPENING_PAREN: -157,
  THIS: -157,
  DECREMENT: -157,
  INCREMENT: -157,
  BANG: -157,
  NEW: -157,
  OPENING_BRACE: -157,
  OPENING_BRACKET: -157,
  FALSE: -157,
  TRUE: -157,
  NULL: -157,
  NUMBER: -157,
  STRING_VALUE: -157,
  $: -157,
  CLOSING_BRACE: -157,
}, {
  CONST: -161,
  LET: -161,
  CLASS: -161,
  DOC_COMMENT: -161,
  EXPORT: -161,
  FOR: -161,
  IF: -161,
  LINE_COMMENT: -161,
  RETURN: -161,
  THROW: -161,
  WHILE: -161,
  IDENTIFIER: -161,
  GET: -161,
  OPENING_PAREN: -161,
  THIS: -161,
  DECREMENT: -161,
  INCREMENT: -161,
  BANG: -161,
  NEW: -161,
  OPENING_BRACE: -161,
  OPENING_BRACKET: -161,
  FALSE: -161,
  TRUE: -161,
  NULL: -161,
  NUMBER: -161,
  STRING_VALUE: -161,
  $: -161,
  CLOSING_BRACE: -161,
}, {
  COLON: 278,
}, {
  BANG: 28,
  CLASS: 10,
  CONST: 4,
  DECREMENT: 23,
  DOC_COMMENT: 12,
  EXPORT: 14,
  FALSE: 38,
  FOR: 47,
  GET: 8,
  IDENTIFIER: 7,
  IF: 49,
  INCREMENT: 25,
  LET: 5,
  LINE_COMMENT: 51,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  RETURN: 53,
  STRING_VALUE: 45,
  THIS: 18,
  THROW: 55,
  TRUE: 39,
  WHILE: 57,
  CLOSING_BRACE: -3,
}, {
  BANG: 28,
  CLASS: 10,
  CONST: 4,
  DECREMENT: 23,
  DOC_COMMENT: 12,
  EXPORT: 14,
  FALSE: 38,
  FOR: 47,
  GET: 8,
  IDENTIFIER: 7,
  IF: 49,
  INCREMENT: 25,
  LET: 5,
  LINE_COMMENT: 51,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  RETURN: 53,
  STRING_VALUE: 45,
  THIS: 18,
  THROW: 55,
  TRUE: 39,
  WHILE: 57,
  CLOSING_BRACE: -3,
}, {
  CLOSING_PAREN: -144,
  COMMA: -144,
}, {
  BITWISE_OR: 181,
  CLOSING_PAREN: -147,
  COMMA: -147,
}, {
  OPENING_BRACE: 281,
}, {
  IF: 49,
}, {
  GET: 8,
  IDENTIFIER: 7,
  NULL: 125,
  OPENING_BRACE: 127,
  OPENING_BRACKET: 129,
}, {
  BANG: 28,
  CLASS: 10,
  CLOSING_BRACE: 284,
  CONST: 4,
  DECREMENT: 23,
  DOC_COMMENT: 12,
  EXPORT: 14,
  FALSE: 38,
  FOR: 47,
  GET: 8,
  IDENTIFIER: 7,
  IF: 49,
  INCREMENT: 25,
  LET: 5,
  LINE_COMMENT: 51,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  RETURN: 53,
  STRING_VALUE: 45,
  THIS: 18,
  THROW: 55,
  TRUE: 39,
  WHILE: 57,
}, {
  BANG: 28,
  CLASS: 10,
  CLOSING_BRACE: 285,
  CONST: 4,
  DECREMENT: 23,
  DOC_COMMENT: 12,
  EXPORT: 14,
  FALSE: 38,
  FOR: 47,
  GET: 8,
  IDENTIFIER: 7,
  IF: 49,
  INCREMENT: 25,
  LET: 5,
  LINE_COMMENT: 51,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  RETURN: 53,
  STRING_VALUE: 45,
  THIS: 18,
  THROW: 55,
  TRUE: 39,
  WHILE: 57,
}, {
  BANG: 28,
  CLASS: 10,
  CONST: 4,
  DECREMENT: 23,
  DOC_COMMENT: 12,
  EXPORT: 14,
  FALSE: 38,
  FOR: 47,
  GET: 8,
  IDENTIFIER: 7,
  IF: 49,
  INCREMENT: 25,
  LET: 5,
  LINE_COMMENT: 51,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  RETURN: 53,
  STRING_VALUE: 45,
  THIS: 18,
  THROW: 55,
  TRUE: 39,
  WHILE: 57,
  CLOSING_BRACE: -3,
}, {
  CONST: -156,
  LET: -156,
  CLASS: -156,
  DOC_COMMENT: -156,
  EXPORT: -156,
  FOR: -156,
  IF: -156,
  LINE_COMMENT: -156,
  RETURN: -156,
  THROW: -156,
  WHILE: -156,
  IDENTIFIER: -156,
  GET: -156,
  OPENING_PAREN: -156,
  THIS: -156,
  DECREMENT: -156,
  INCREMENT: -156,
  BANG: -156,
  NEW: -156,
  OPENING_BRACE: -156,
  OPENING_BRACKET: -156,
  FALSE: -156,
  TRUE: -156,
  NULL: -156,
  NUMBER: -156,
  STRING_VALUE: -156,
  $: -156,
  CLOSING_BRACE: -156,
}, {
  BITWISE_OR: 181,
  SEMICOLON: 287,
}, {
  CLOSING_BRACE: -140,
  DOC_COMMENT: -140,
  GET: -140,
  LINE_COMMENT: -140,
  IDENTIFIER: -140,
}, {
  CLOSING_BRACE: -142,
  DOC_COMMENT: -142,
  GET: -142,
  LINE_COMMENT: -142,
  IDENTIFIER: -142,
}, {
  BANG: 28,
  CLASS: 10,
  CLOSING_BRACE: 288,
  CONST: 4,
  DECREMENT: 23,
  DOC_COMMENT: 12,
  EXPORT: 14,
  FALSE: 38,
  FOR: 47,
  GET: 8,
  IDENTIFIER: 7,
  IF: 49,
  INCREMENT: 25,
  LET: 5,
  LINE_COMMENT: 51,
  NEW: 31,
  NULL: 41,
  NUMBER: 43,
  OPENING_BRACE: 33,
  OPENING_BRACKET: 36,
  OPENING_PAREN: 17,
  RETURN: 53,
  STRING_VALUE: 45,
  THIS: 18,
  THROW: 55,
  TRUE: 39,
  WHILE: 57,
}, {
  CLOSING_BRACE: -124,
  OPENING_BRACKET: -124,
  IDENTIFIER: -124,
  GET: -124,
}, {
  CONST: -150,
  LET: -150,
  CLASS: -150,
  DOC_COMMENT: -150,
  EXPORT: -150,
  FOR: -150,
  IF: -150,
  LINE_COMMENT: -150,
  RETURN: -150,
  THROW: -150,
  WHILE: -150,
  IDENTIFIER: -150,
  GET: -150,
  OPENING_PAREN: -150,
  THIS: -150,
  DECREMENT: -150,
  INCREMENT: -150,
  BANG: -150,
  NEW: -150,
  OPENING_BRACE: -150,
  OPENING_BRACKET: -150,
  FALSE: -150,
  TRUE: -150,
  NULL: -150,
  NUMBER: -150,
  STRING_VALUE: -150,
  $: -150,
  CLOSING_BRACE: -150,
}];
const gotos: Array<Gotos> = [
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    AssignmentStatement: 3,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    ClassDeclaration: 9,
    DecrementExpression: 22,
    DocComment: 11,
    ExportDefaultDeclaration: 13,
    Expression: 16,
    ExpressionStatement: 15,
    ForStatement: 46,
    Identifier: 6,
    IfStatement: 48,
    IncrementExpression: 24,
    IndexExpression: 26,
    LineComment: 50,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    ReturnStatement: 52,
    Statement: 2,
    StatementList: 1,
    StringValue: 44,
    ThrowStatement: 54,
    WhileStatement: 56,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    AssignmentStatement: 3,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    ClassDeclaration: 9,
    DecrementExpression: 22,
    DocComment: 11,
    ExportDefaultDeclaration: 13,
    Expression: 16,
    ExpressionStatement: 15,
    ForStatement: 46,
    Identifier: 6,
    IfStatement: 48,
    IncrementExpression: 24,
    IndexExpression: 26,
    LineComment: 50,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    ReturnStatement: 52,
    Statement: 58,
    StringValue: 44,
    ThrowStatement: 54,
    WhileStatement: 56,
  },
  {},
  {},
  {
    ArrayPattern: 62,
    Id: 59,
    Identifier: 60,
    ObjectPattern: 64,
    Pattern: 61,
  },
  {
    ArrayPattern: 62,
    Id: 66,
    Identifier: 60,
    ObjectPattern: 64,
    Pattern: 61,
  },
  {},
  {},
  {},
  {},
  {
    Identifier: 69,
  },
  {},
  {},
  {},
  {},
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 90,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {},
  {},
  {},
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 92,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 93,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 94,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 95,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {},
  {
    Identifier: 98,
    NumberValue: 99,
    ObjectProperty: 97,
    ObjectPropertyList: 96,
  },
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 102,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    OptionalExpressionList: 101,
    PrimitiveValue: 34,
    SpreadElement: 103,
    StringValue: 44,
  },
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 109,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 110,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {
    Identifier: 115,
    IdentifierList: 114,
  },
  {},
  {
    Identifier: 98,
    NumberValue: 99,
    ObjectProperty: 97,
    ObjectPropertyList: 117,
  },
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 120,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    GenericType: 122,
    Identifier: 123,
    NamedType: 124,
    ObjectType: 126,
    TupleType: 128,
    Type: 121,
    UnionType: 130,
  },
  {},
  {
    ClassDeclaration: 133,
    Declaration: 132,
  },
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 134,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 135,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 137,
    ExpressionList: 136,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    SpreadElement: 138,
    StringValue: 44,
  },
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 139,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    Identifier: 140,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 141,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 142,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 143,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 144,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 145,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 146,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 147,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 148,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 149,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 150,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 157,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 159,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    SpreadElement: 160,
    StringValue: 44,
  },
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 164,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {},
  {
    VariableDeclaration: 165,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 167,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {},
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 170,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    GenericType: 122,
    Identifier: 123,
    NamedType: 124,
    ObjectType: 126,
    TupleType: 128,
    Type: 171,
    UnionType: 130,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 172,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    Identifier: 174,
  },
  {},
  {},
  {},
  {
    GenericType: 122,
    Identifier: 123,
    NamedType: 124,
    ObjectType: 126,
    TupleType: 128,
    Type: 178,
    UnionType: 130,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 179,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {
    Identifier: 188,
    ObjectTypeIndex: 185,
    ObjectTypeMemberList: 183,
    ObjectTypeMemberListItem: 184,
    ObjectTypeProperty: 187,
  },
  {},
  {
    GenericType: 122,
    Identifier: 123,
    NamedType: 124,
    ObjectType: 126,
    TupleType: 128,
    Type: 190,
    TypeList: 189,
    UnionType: 130,
  },
  {},
  {
    ClassBodyList: 191,
    ClassBodyListItem: 192,
    DocComment: 193,
    GetAccessor: 194,
    Identifier: 198,
    LineComment: 196,
    MethodDefinition: 197,
    PropertyDeclaration: 199,
  },
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 137,
    ExpressionList: 203,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    SpreadElement: 138,
    StringValue: 44,
  },
  {},
  {
    Identifier: 98,
    NumberValue: 99,
    ObjectProperty: 204,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 205,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 206,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {
    ArrayPattern: 62,
    Id: 213,
    Identifier: 60,
    ObjectPattern: 64,
    Pattern: 61,
    VariableDeclarator: 212,
    VariableDeclaratorList: 211,
  },
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {
    GenericType: 122,
    Identifier: 123,
    NamedType: 124,
    ObjectType: 126,
    TupleType: 128,
    Type: 221,
    UnionType: 130,
  },
  {
    GenericType: 122,
    Identifier: 123,
    NamedType: 124,
    ObjectType: 126,
    TupleType: 128,
    Type: 190,
    TypeList: 222,
    UnionType: 130,
  },
  {
    Identifier: 188,
    ObjectTypeIndex: 185,
    ObjectTypeMemberListItem: 224,
    ObjectTypeProperty: 187,
  },
  {},
  {},
  {
    Identifier: 225,
  },
  {},
  {},
  {},
  {},
  {
    ClassBodyListItem: 230,
    DocComment: 193,
    GetAccessor: 194,
    Identifier: 198,
    LineComment: 196,
    MethodDefinition: 197,
    PropertyDeclaration: 199,
  },
  {},
  {},
  {},
  {
    Identifier: 231,
  },
  {},
  {},
  {},
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 234,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    SpreadElement: 235,
    StringValue: 44,
  },
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 238,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    ArrayPattern: 62,
    Id: 213,
    Identifier: 60,
    ObjectPattern: 64,
    Pattern: 61,
    VariableDeclarator: 239,
  },
  {},
  {},
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 243,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 244,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {},
  {},
  {},
  {},
  {},
  {},
  {
    GenericType: 122,
    Identifier: 123,
    NamedType: 124,
    ObjectType: 126,
    TupleType: 128,
    Type: 247,
    UnionType: 130,
  },
  {},
  {
    GenericType: 122,
    Identifier: 123,
    NamedType: 124,
    ObjectType: 126,
    TupleType: 128,
    Type: 248,
    UnionType: 130,
  },
  {},
  {},
  {},
  {
    Argument: 251,
    ArgumentList: 250,
    Identifier: 252,
  },
  {
    GenericType: 122,
    Identifier: 123,
    NamedType: 124,
    ObjectType: 126,
    TupleType: 128,
    Type: 253,
    UnionType: 130,
  },
  {},
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 254,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 256,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    AssignmentStatement: 3,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    ClassDeclaration: 9,
    DecrementExpression: 22,
    DocComment: 11,
    ExportDefaultDeclaration: 13,
    Expression: 16,
    ExpressionStatement: 15,
    ForStatement: 46,
    Identifier: 6,
    IfStatement: 48,
    IncrementExpression: 24,
    IndexExpression: 26,
    LineComment: 50,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    ReturnStatement: 52,
    Statement: 2,
    StatementList: 257,
    StringValue: 44,
    ThrowStatement: 54,
    WhileStatement: 56,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    AssignmentStatement: 3,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    ClassDeclaration: 9,
    DecrementExpression: 22,
    DocComment: 11,
    ExportDefaultDeclaration: 13,
    Expression: 16,
    ExpressionStatement: 15,
    ForStatement: 46,
    Identifier: 6,
    IfStatement: 48,
    IncrementExpression: 24,
    IndexExpression: 26,
    LineComment: 50,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    ReturnStatement: 52,
    Statement: 2,
    StatementList: 258,
    StringValue: 44,
    ThrowStatement: 54,
    WhileStatement: 56,
  },
  {},
  {},
  {},
  {
    GenericType: 122,
    Identifier: 123,
    NamedType: 124,
    ObjectType: 126,
    TupleType: 128,
    Type: 261,
    UnionType: 130,
  },
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    DecrementExpression: 22,
    Expression: 268,
    Identifier: 91,
    IncrementExpression: 24,
    IndexExpression: 26,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    StringValue: 44,
  },
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    AssignmentStatement: 3,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    ClassDeclaration: 9,
    DecrementExpression: 22,
    DocComment: 11,
    ExportDefaultDeclaration: 13,
    Expression: 16,
    ExpressionStatement: 15,
    ForStatement: 46,
    Identifier: 6,
    IfStatement: 48,
    IncrementExpression: 24,
    IndexExpression: 26,
    LineComment: 50,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    ReturnStatement: 52,
    Statement: 58,
    StringValue: 44,
    ThrowStatement: 54,
    WhileStatement: 56,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    AssignmentStatement: 3,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    ClassDeclaration: 9,
    DecrementExpression: 22,
    DocComment: 11,
    ExportDefaultDeclaration: 13,
    Expression: 16,
    ExpressionStatement: 15,
    ForStatement: 46,
    Identifier: 6,
    IfStatement: 48,
    IncrementExpression: 24,
    IndexExpression: 26,
    LineComment: 50,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    ReturnStatement: 52,
    Statement: 58,
    StringValue: 44,
    ThrowStatement: 54,
    WhileStatement: 56,
  },
  {},
  {},
  {},
  {},
  {},
  {},
  {
    Argument: 274,
    Identifier: 252,
  },
  {
    GenericType: 122,
    Identifier: 123,
    NamedType: 124,
    ObjectType: 126,
    TupleType: 128,
    Type: 275,
    UnionType: 130,
  },
  {},
  {},
  {},
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    AssignmentStatement: 3,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    ClassDeclaration: 9,
    DecrementExpression: 22,
    DocComment: 11,
    ExportDefaultDeclaration: 13,
    Expression: 16,
    ExpressionStatement: 15,
    ForStatement: 46,
    Identifier: 6,
    IfStatement: 48,
    IncrementExpression: 24,
    IndexExpression: 26,
    LineComment: 50,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    ReturnStatement: 52,
    Statement: 2,
    StatementList: 279,
    StringValue: 44,
    ThrowStatement: 54,
    WhileStatement: 56,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    AssignmentStatement: 3,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    ClassDeclaration: 9,
    DecrementExpression: 22,
    DocComment: 11,
    ExportDefaultDeclaration: 13,
    Expression: 16,
    ExpressionStatement: 15,
    ForStatement: 46,
    Identifier: 6,
    IfStatement: 48,
    IncrementExpression: 24,
    IndexExpression: 26,
    LineComment: 50,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    ReturnStatement: 52,
    Statement: 2,
    StatementList: 280,
    StringValue: 44,
    ThrowStatement: 54,
    WhileStatement: 56,
  },
  {},
  {},
  {},
  {
    IfStatement: 282,
  },
  {
    GenericType: 122,
    Identifier: 123,
    NamedType: 124,
    ObjectType: 126,
    TupleType: 128,
    Type: 283,
    UnionType: 130,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    AssignmentStatement: 3,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    ClassDeclaration: 9,
    DecrementExpression: 22,
    DocComment: 11,
    ExportDefaultDeclaration: 13,
    Expression: 16,
    ExpressionStatement: 15,
    ForStatement: 46,
    Identifier: 6,
    IfStatement: 48,
    IncrementExpression: 24,
    IndexExpression: 26,
    LineComment: 50,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    ReturnStatement: 52,
    Statement: 58,
    StringValue: 44,
    ThrowStatement: 54,
    WhileStatement: 56,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    AssignmentStatement: 3,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    ClassDeclaration: 9,
    DecrementExpression: 22,
    DocComment: 11,
    ExportDefaultDeclaration: 13,
    Expression: 16,
    ExpressionStatement: 15,
    ForStatement: 46,
    Identifier: 6,
    IfStatement: 48,
    IncrementExpression: 24,
    IndexExpression: 26,
    LineComment: 50,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    ReturnStatement: 52,
    Statement: 58,
    StringValue: 44,
    ThrowStatement: 54,
    WhileStatement: 56,
  },
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    AssignmentStatement: 3,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    ClassDeclaration: 9,
    DecrementExpression: 22,
    DocComment: 11,
    ExportDefaultDeclaration: 13,
    Expression: 16,
    ExpressionStatement: 15,
    ForStatement: 46,
    Identifier: 6,
    IfStatement: 48,
    IncrementExpression: 24,
    IndexExpression: 26,
    LineComment: 50,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    ReturnStatement: 52,
    Statement: 2,
    StatementList: 286,
    StringValue: 44,
    ThrowStatement: 54,
    WhileStatement: 56,
  },
  {},
  {},
  {},
  {},
  {
    ArrayValue: 35,
    AssignmentExpression: 19,
    AssignmentStatement: 3,
    BinaryExpression: 20,
    BooleanValue: 37,
    CallExpression: 21,
    ClassDeclaration: 9,
    DecrementExpression: 22,
    DocComment: 11,
    ExportDefaultDeclaration: 13,
    Expression: 16,
    ExpressionStatement: 15,
    ForStatement: 46,
    Identifier: 6,
    IfStatement: 48,
    IncrementExpression: 24,
    IndexExpression: 26,
    LineComment: 50,
    LogicalNotExpression: 27,
    MemberExpression: 29,
    NewExpression: 30,
    NullValue: 40,
    NumberValue: 42,
    ObjectValue: 32,
    PrimitiveValue: 34,
    ReturnStatement: 52,
    Statement: 58,
    StringValue: 44,
    ThrowStatement: 54,
    WhileStatement: 56,
  },
  {},
  {},
];
const rules = [{
  production: "StatementList'",
  pop: 1,
  action: r0,
}, {
  production: 'StatementList',
  pop: 1,
  action: r1,
}, {
  production: 'StatementList',
  pop: 2,
  action: r2,
}, {
  production: 'StatementList',
  pop: 0,
  action: r3,
}, {
  production: 'Statement',
  pop: 1,
  action: r4,
}, {
  production: 'Statement',
  pop: 1,
  action: r5,
}, {
  production: 'Statement',
  pop: 1,
  action: r6,
}, {
  production: 'Statement',
  pop: 1,
  action: r7,
}, {
  production: 'Statement',
  pop: 1,
  action: r8,
}, {
  production: 'Statement',
  pop: 1,
  action: r9,
}, {
  production: 'Statement',
  pop: 1,
  action: r10,
}, {
  production: 'Statement',
  pop: 1,
  action: r11,
}, {
  production: 'Statement',
  pop: 1,
  action: r12,
}, {
  production: 'Statement',
  pop: 1,
  action: r13,
}, {
  production: 'Statement',
  pop: 1,
  action: r14,
}, {
  production: 'AssignmentStatement',
  pop: 7,
  action: r15,
}, {
  production: 'AssignmentStatement',
  pop: 5,
  action: r16,
}, {
  production: 'AssignmentStatement',
  pop: 7,
  action: r17,
}, {
  production: 'AssignmentStatement',
  pop: 5,
  action: r18,
}, {
  production: 'AssignmentStatement',
  pop: 4,
  action: r19,
}, {
  production: 'Id',
  pop: 1,
  action: r20,
}, {
  production: 'Id',
  pop: 1,
  action: r21,
}, {
  production: 'Pattern',
  pop: 1,
  action: r22,
}, {
  production: 'Pattern',
  pop: 1,
  action: r23,
}, {
  production: 'ArrayPattern',
  pop: 3,
  action: r24,
}, {
  production: 'IdentifierList',
  pop: 1,
  action: r25,
}, {
  production: 'IdentifierList',
  pop: 2,
  action: r26,
}, {
  production: 'IdentifierList',
  pop: 1,
  action: r27,
}, {
  production: 'IdentifierList',
  pop: 3,
  action: r28,
}, {
  production: 'IdentifierList',
  pop: 2,
  action: r29,
}, {
  production: 'IdentifierList',
  pop: 2,
  action: r30,
}, {
  production: 'IdentifierList',
  pop: 0,
  action: r31,
}, {
  production: 'ObjectPattern',
  pop: 3,
  action: r32,
}, {
  production: 'Identifier',
  pop: 1,
  action: r33,
}, {
  production: 'Identifier',
  pop: 1,
  action: r34,
}, {
  production: 'Expression',
  pop: 3,
  action: r35,
}, {
  production: 'Expression',
  pop: 2,
  action: r36,
}, {
  production: 'Expression',
  pop: 1,
  action: r37,
}, {
  production: 'Expression',
  pop: 1,
  action: r38,
}, {
  production: 'Expression',
  pop: 1,
  action: r39,
}, {
  production: 'Expression',
  pop: 1,
  action: r40,
}, {
  production: 'Expression',
  pop: 1,
  action: r41,
}, {
  production: 'Expression',
  pop: 1,
  action: r42,
}, {
  production: 'Expression',
  pop: 3,
  action: r43,
}, {
  production: 'Expression',
  pop: 1,
  action: r44,
}, {
  production: 'Expression',
  pop: 1,
  action: r45,
}, {
  production: 'Expression',
  pop: 1,
  action: r46,
}, {
  production: 'Expression',
  pop: 1,
  action: r47,
}, {
  production: 'Expression',
  pop: 1,
  action: r48,
}, {
  production: 'Expression',
  pop: 1,
  action: r49,
}, {
  production: 'Expression',
  pop: 1,
  action: r50,
}, {
  production: 'AssignmentExpression',
  pop: 3,
  action: r51,
}, {
  production: 'BinaryExpression',
  pop: 3,
  action: r52,
}, {
  production: 'BinaryExpression',
  pop: 3,
  action: r53,
}, {
  production: 'BinaryExpression',
  pop: 3,
  action: r54,
}, {
  production: 'BinaryExpression',
  pop: 3,
  action: r55,
}, {
  production: 'BinaryExpression',
  pop: 3,
  action: r56,
}, {
  production: 'BinaryExpression',
  pop: 3,
  action: r57,
}, {
  production: 'BinaryExpression',
  pop: 3,
  action: r58,
}, {
  production: 'BinaryExpression',
  pop: 3,
  action: r59,
}, {
  production: 'BinaryExpression',
  pop: 3,
  action: r60,
}, {
  production: 'BinaryExpression',
  pop: 3,
  action: r61,
}, {
  production: 'BinaryExpression',
  pop: 3,
  action: r62,
}, {
  production: 'NewExpression',
  pop: 5,
  action: r63,
}, {
  production: 'CallExpression',
  pop: 4,
  action: r64,
}, {
  production: 'ExpressionList',
  pop: 1,
  action: r65,
}, {
  production: 'ExpressionList',
  pop: 1,
  action: r66,
}, {
  production: 'ExpressionList',
  pop: 3,
  action: r67,
}, {
  production: 'ExpressionList',
  pop: 3,
  action: r68,
}, {
  production: 'ExpressionList',
  pop: 0,
  action: r69,
}, {
  production: 'SpreadElement',
  pop: 2,
  action: r70,
}, {
  production: 'DecrementExpression',
  pop: 2,
  action: r71,
}, {
  production: 'DecrementExpression',
  pop: 2,
  action: r72,
}, {
  production: 'IncrementExpression',
  pop: 2,
  action: r73,
}, {
  production: 'IncrementExpression',
  pop: 2,
  action: r74,
}, {
  production: 'IndexExpression',
  pop: 4,
  action: r75,
}, {
  production: 'LogicalNotExpression',
  pop: 2,
  action: r76,
}, {
  production: 'MemberExpression',
  pop: 3,
  action: r77,
}, {
  production: 'ObjectValue',
  pop: 3,
  action: r78,
}, {
  production: 'ObjectPropertyList',
  pop: 1,
  action: r79,
}, {
  production: 'ObjectPropertyList',
  pop: 3,
  action: r80,
}, {
  production: 'ObjectPropertyList',
  pop: 0,
  action: r81,
}, {
  production: 'ObjectProperty',
  pop: 3,
  action: r82,
}, {
  production: 'ObjectProperty',
  pop: 1,
  action: r83,
}, {
  production: 'ObjectProperty',
  pop: 3,
  action: r84,
}, {
  production: 'ObjectProperty',
  pop: 5,
  action: r85,
}, {
  production: 'PrimitiveValue',
  pop: 1,
  action: r86,
}, {
  production: 'PrimitiveValue',
  pop: 1,
  action: r87,
}, {
  production: 'PrimitiveValue',
  pop: 1,
  action: r88,
}, {
  production: 'PrimitiveValue',
  pop: 1,
  action: r89,
}, {
  production: 'PrimitiveValue',
  pop: 1,
  action: r90,
}, {
  production: 'ArrayValue',
  pop: 3,
  action: r91,
}, {
  production: 'OptionalExpressionList',
  pop: 1,
  action: r92,
}, {
  production: 'OptionalExpressionList',
  pop: 2,
  action: r93,
}, {
  production: 'OptionalExpressionList',
  pop: 1,
  action: r94,
}, {
  production: 'OptionalExpressionList',
  pop: 2,
  action: r95,
}, {
  production: 'OptionalExpressionList',
  pop: 1,
  action: r96,
}, {
  production: 'OptionalExpressionList',
  pop: 3,
  action: r97,
}, {
  production: 'OptionalExpressionList',
  pop: 2,
  action: r98,
}, {
  production: 'OptionalExpressionList',
  pop: 3,
  action: r99,
}, {
  production: 'OptionalExpressionList',
  pop: 2,
  action: r100,
}, {
  production: 'OptionalExpressionList',
  pop: 2,
  action: r101,
}, {
  production: 'OptionalExpressionList',
  pop: 0,
  action: r102,
}, {
  production: 'BooleanValue',
  pop: 1,
  action: r103,
}, {
  production: 'BooleanValue',
  pop: 1,
  action: r104,
}, {
  production: 'NullValue',
  pop: 1,
  action: r105,
}, {
  production: 'NumberValue',
  pop: 1,
  action: r106,
}, {
  production: 'StringValue',
  pop: 1,
  action: r107,
}, {
  production: 'Type',
  pop: 1,
  action: r108,
}, {
  production: 'Type',
  pop: 1,
  action: r109,
}, {
  production: 'Type',
  pop: 1,
  action: r110,
}, {
  production: 'Type',
  pop: 1,
  action: r111,
}, {
  production: 'Type',
  pop: 1,
  action: r112,
}, {
  production: 'GenericType',
  pop: 4,
  action: r113,
}, {
  production: 'TypeList',
  pop: 1,
  action: r114,
}, {
  production: 'TypeList',
  pop: 3,
  action: r115,
}, {
  production: 'NamedType',
  pop: 1,
  action: r116,
}, {
  production: 'NamedType',
  pop: 1,
  action: r117,
}, {
  production: 'ObjectType',
  pop: 3,
  action: r118,
}, {
  production: 'ObjectTypeMemberList',
  pop: 1,
  action: r119,
}, {
  production: 'ObjectTypeMemberList',
  pop: 2,
  action: r120,
}, {
  production: 'ObjectTypeMemberList',
  pop: 0,
  action: r121,
}, {
  production: 'ObjectTypeMemberListItem',
  pop: 1,
  action: r122,
}, {
  production: 'ObjectTypeMemberListItem',
  pop: 1,
  action: r123,
}, {
  production: 'ObjectTypeIndex',
  pop: 8,
  action: r124,
}, {
  production: 'ObjectTypeProperty',
  pop: 4,
  action: r125,
}, {
  production: 'TupleType',
  pop: 3,
  action: r126,
}, {
  production: 'UnionType',
  pop: 3,
  action: r127,
}, {
  production: 'ExportDefaultDeclaration',
  pop: 3,
  action: r128,
}, {
  production: 'Declaration',
  pop: 1,
  action: r129,
}, {
  production: 'ClassDeclaration',
  pop: 5,
  action: r130,
}, {
  production: 'ClassBodyList',
  pop: 1,
  action: r131,
}, {
  production: 'ClassBodyList',
  pop: 2,
  action: r132,
}, {
  production: 'ClassBodyList',
  pop: 0,
  action: r133,
}, {
  production: 'ClassBodyListItem',
  pop: 1,
  action: r134,
}, {
  production: 'ClassBodyListItem',
  pop: 1,
  action: r135,
}, {
  production: 'ClassBodyListItem',
  pop: 1,
  action: r136,
}, {
  production: 'ClassBodyListItem',
  pop: 1,
  action: r137,
}, {
  production: 'ClassBodyListItem',
  pop: 1,
  action: r138,
}, {
  production: 'DocComment',
  pop: 1,
  action: r139,
}, {
  production: 'GetAccessor',
  pop: 7,
  action: r140,
}, {
  production: 'LineComment',
  pop: 1,
  action: r141,
}, {
  production: 'MethodDefinition',
  pop: 7,
  action: r142,
}, {
  production: 'ArgumentList',
  pop: 1,
  action: r143,
}, {
  production: 'ArgumentList',
  pop: 3,
  action: r144,
}, {
  production: 'ArgumentList',
  pop: 0,
  action: r145,
}, {
  production: 'Argument',
  pop: 1,
  action: r146,
}, {
  production: 'Argument',
  pop: 3,
  action: r147,
}, {
  production: 'PropertyDeclaration',
  pop: 4,
  action: r148,
}, {
  production: 'ExpressionStatement',
  pop: 2,
  action: r149,
}, {
  production: 'ForStatement',
  pop: 11,
  action: r150,
}, {
  production: 'VariableDeclaration',
  pop: 2,
  action: r151,
}, {
  production: 'VariableDeclaratorList',
  pop: 1,
  action: r152,
}, {
  production: 'VariableDeclaratorList',
  pop: 2,
  action: r153,
}, {
  production: 'VariableDeclarator',
  pop: 3,
  action: r154,
}, {
  production: 'VariableDeclarator',
  pop: 1,
  action: r155,
}, {
  production: 'IfStatement',
  pop: 9,
  action: r156,
}, {
  production: 'IfStatement',
  pop: 7,
  action: r157,
}, {
  production: 'ThrowStatement',
  pop: 3,
  action: r158,
}, {
  production: 'ReturnStatement',
  pop: 2,
  action: r159,
}, {
  production: 'ReturnStatement',
  pop: 3,
  action: r160,
}, {
  production: 'WhileStatement',
  pop: 7,
  action: r161,
}];
const EOF = new Token('$', -1, -1, '');
export default function parseStatement(input: string) {
  const stack: Array<[Production | Token | null, number]> = [[null, 0]];
  const lexer = new Lexer(input);
  let token = lexer.next() || EOF;
  while (true) {
    const current = stack[stack.length - 1][1];
    const action = actions[current][token.name];
    if (action === undefined) {
      // TODO: maybe show stack here?
      throw new Error('syntax error at symbol ' + token.name);
    } else if (action < 0) {
      // Reduce.
      // TODO: compare Math.abs with -, but will have to implement
      // unary minus (currently only have it for literals)
      const rule = rules[Math.abs(action)];
      const production = rule.production;
      const pop = rule.pop;
      const code: any = rule.action;
      const popped: Array<Production | Token | null> = new Array(pop);
      for (let i = 0; i < pop; i++) {
        const last = stack.pop()!;
        popped[pop - i - 1] = last[0];
      }
      const next = stack[stack.length - 1][1];
      const target = gotos[next][production];
      if (pop === 0) {
        stack.push([code(), target]);
      } else if (pop === 1) {
        stack.push([code(popped[0]), target]);
      } else if (pop === 2) {
        stack.push([code(popped[0], popped[1]), target]);
      } else if (pop === 3) {
        stack.push([code(popped[0], popped[1], popped[2]), target]);
      } else if (pop === 4) {
        stack.push([code(popped[0], popped[1], popped[2], popped[3]), target]);
      } else if (pop === 5) {
        stack.push([
          code(popped[0], popped[1], popped[2], popped[3], popped[4]),
          target,
        ]);
      } else if (pop === 6) {
        stack.push([
          code(
            popped[0],
            popped[1],
            popped[2],
            popped[3],
            popped[4],
            popped[5],
          ),
          target,
        ]);
      } else if (pop === 7) {
        stack.push([
          code(
            popped[0],
            popped[1],
            popped[2],
            popped[3],
            popped[4],
            popped[5],
            popped[6],
          ),
          target,
        ]);
      } else if (pop === 8) {
        stack.push([
          code(
            popped[0],
            popped[1],
            popped[2],
            popped[3],
            popped[4],
            popped[5],
            popped[6],
            popped[7],
          ),
          target,
        ]);
      } else if (pop === 9) {
        stack.push([
          code(
            popped[0],
            popped[1],
            popped[2],
            popped[3],
            popped[4],
            popped[5],
            popped[6],
            popped[7],
            popped[8],
          ),
          target,
        ]);
      } else if (pop === 10) {
        stack.push([
          code(
            popped[0],
            popped[1],
            popped[2],
            popped[3],
            popped[4],
            popped[5],
            popped[6],
            popped[7],
            popped[8],
            popped[9],
          ),
          target,
        ]);
      } else if (pop === 11) {
        stack.push([
          code(
            popped[0],
            popped[1],
            popped[2],
            popped[3],
            popped[4],
            popped[5],
            popped[6],
            popped[7],
            popped[8],
            popped[9],
            popped[10],
          ),
          target,
        ]);
      }
    } else if (action > 0) {
      // Shift.
      stack.push([token, action]);
      token = lexer.next() || EOF;
    } else if (action === 0) {
      // Accept.
      const [tree] = stack[1];
      return tree;
    }
  }
}
